//
// File generated by HDevelop for HALCON/.NET (C#) Version 13.0.2
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
    public HTuple hv_ExpDefaultWinHandle;

    public void HDevelopStop()
    {
        MessageBox.Show("Press button to continue", "Program stop");
    }

    // Procedures 
    // Chapter: Graphics / Text
    // Short Description: This procedure writes a text message. 
    public void disp_message(HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem,
        HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
    {



        // Local iconic variables 

        // Local control variables 

        HTuple hv_GenParamName = null, hv_GenParamValue = null;
        HTuple hv_Color_COPY_INP_TMP = hv_Color.Clone();
        HTuple hv_Column_COPY_INP_TMP = hv_Column.Clone();
        HTuple hv_CoordSystem_COPY_INP_TMP = hv_CoordSystem.Clone();
        HTuple hv_Row_COPY_INP_TMP = hv_Row.Clone();

        // Initialize local and output iconic variables 
        //This procedure displays text in a graphics window.
        //
        //Input parameters:
        //WindowHandle: The WindowHandle of the graphics window, where
        //   the message should be displayed
        //String: A tuple of strings containing the text message to be displayed
        //CoordSystem: If set to 'window', the text position is given
        //   with respect to the window coordinate system.
        //   If set to 'image', image coordinates are used.
        //   (This may be useful in zoomed images.)
        //Row: The row coordinate of the desired text position
        //   A tuple of values is allowed to display text at different
        //   positions.
        //Column: The column coordinate of the desired text position
        //   A tuple of values is allowed to display text at different
        //   positions.
        //Color: defines the color of the text as string.
        //   If set to [], '' or 'auto' the currently set color is used.
        //   If a tuple of strings is passed, the colors are used cyclically...
        //   - if |Row| == |Column| == 1: for each new textline
        //   = else for each text position.
        //Box: If Box[0] is set to 'true', the text is written within an orange box.
        //     If set to' false', no box is displayed.
        //     If set to a color string (e.g. 'white', '#FF00CC', etc.),
        //       the text is written in a box of that color.
        //     An optional second value for Box (Box[1]) controls if a shadow is displayed:
        //       'true' -> display a shadow in a default color
        //       'false' -> display no shadow
        //       otherwise -> use given string as color string for the shadow color
        //
        //It is possible to display multiple text strings in a single call.
        //In this case, some restrictions apply:
        //- Multiple text positions can be defined by specifying a tuple
        //  with multiple Row and/or Column coordinates, i.e.:
        //  - |Row| == n, |Column| == n
        //  - |Row| == n, |Column| == 1
        //  - |Row| == 1, |Column| == n
        //- If |Row| == |Column| == 1,
        //  each element of String is display in a new textline.
        //- If multiple positions or specified, the number of Strings
        //  must match the number of positions, i.e.:
        //  - Either |String| == n (each string is displayed at the
        //                          corresponding position),
        //  - or     |String| == 1 (The string is displayed n times).
        //
        //
        //Convert the parameters for disp_text.
        if ((int)((new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
            new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(new HTuple())))) != 0)
        {

            return;
        }
        if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
        {
            hv_Row_COPY_INP_TMP = 12;
        }
        if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
        {
            hv_Column_COPY_INP_TMP = 12;
        }
        //
        //Convert the parameter Box to generic parameters.
        hv_GenParamName = new HTuple();
        hv_GenParamValue = new HTuple();
        if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(0))) != 0)
        {
            if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleEqual("false"))) != 0)
            {
                //Display no box
                hv_GenParamName = hv_GenParamName.TupleConcat("box");
                hv_GenParamValue = hv_GenParamValue.TupleConcat("false");
            }
            else if ((int)(new HTuple(((hv_Box.TupleSelect(0))).TupleNotEqual("true"))) != 0)
            {
                //Set a color other than the default.
                hv_GenParamName = hv_GenParamName.TupleConcat("box_color");
                hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Box.TupleSelect(0));
            }
        }
        if ((int)(new HTuple((new HTuple(hv_Box.TupleLength())).TupleGreater(1))) != 0)
        {
            if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleEqual("false"))) != 0)
            {
                //Display no shadow.
                hv_GenParamName = hv_GenParamName.TupleConcat("shadow");
                hv_GenParamValue = hv_GenParamValue.TupleConcat("false");
            }
            else if ((int)(new HTuple(((hv_Box.TupleSelect(1))).TupleNotEqual("true"))) != 0)
            {
                //Set a shadow color other than the default.
                hv_GenParamName = hv_GenParamName.TupleConcat("shadow_color");
                hv_GenParamValue = hv_GenParamValue.TupleConcat(hv_Box.TupleSelect(1));
            }
        }
        //Restore default CoordSystem behavior.
        if ((int)(new HTuple(hv_CoordSystem_COPY_INP_TMP.TupleNotEqual("window"))) != 0)
        {
            hv_CoordSystem_COPY_INP_TMP = "image";
        }
        //
        if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(""))) != 0)
        {
            //disp_text does not accept an empty string for Color.
            hv_Color_COPY_INP_TMP = new HTuple();
        }
        //
        HOperatorSet.DispText(hv_ExpDefaultWinHandle, hv_String, hv_CoordSystem_COPY_INP_TMP,
            hv_Row_COPY_INP_TMP, hv_Column_COPY_INP_TMP, hv_Color_COPY_INP_TMP, hv_GenParamName,
            hv_GenParamValue);

        return;
    }

    // Chapter: Graphics / Text
    // Short Description: Set font independent of OS 
    public void set_display_font(HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font,
        HTuple hv_Bold, HTuple hv_Slant)
    {
        return;


        // Local iconic variables 

        // Local control variables 

        HTuple hv_OS = null, hv_Fonts = new HTuple();
        HTuple hv_Style = null, hv_Exception = new HTuple(), hv_AvailableFonts = null;
        HTuple hv_Fdx = null, hv_Indices = new HTuple();
        HTuple hv_Font_COPY_INP_TMP = hv_Font.Clone();
        HTuple hv_Size_COPY_INP_TMP = hv_Size.Clone();

        // Initialize local and output iconic variables 
        //This procedure sets the text font of the current window with
        //the specified attributes.
        //
        //Input parameters:
        //WindowHandle: The graphics window for which the font will be set
        //Size: The font size. If Size=-1, the default of 16 is used.
        //Bold: If set to 'true', a bold font is used
        //Slant: If set to 'true', a slanted font is used
        //
        HOperatorSet.GetSystem("operating_system", out hv_OS);
        if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
            new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
        {
            hv_Size_COPY_INP_TMP = 16;
        }
        if ((int)(new HTuple(((hv_OS.TupleSubstr(0, 2))).TupleEqual("Win"))) != 0)
        {
            //Restore previous behaviour
            hv_Size_COPY_INP_TMP = ((1.13677 * hv_Size_COPY_INP_TMP)).TupleInt();
        }
        else
        {
            hv_Size_COPY_INP_TMP = hv_Size_COPY_INP_TMP.TupleInt();
        }
        if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))) != 0)
        {
            hv_Fonts = new HTuple();
            hv_Fonts[0] = "Courier";
            hv_Fonts[1] = "Courier 10 Pitch";
            hv_Fonts[2] = "Courier New";
            hv_Fonts[3] = "CourierNew";
            hv_Fonts[4] = "Liberation Mono";
        }
        else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
        {
            hv_Fonts = new HTuple();
            hv_Fonts[0] = "Consolas";
            hv_Fonts[1] = "Menlo";
            hv_Fonts[2] = "Courier";
            hv_Fonts[3] = "Courier 10 Pitch";
            hv_Fonts[4] = "FreeMono";
            hv_Fonts[5] = "Liberation Mono";
        }
        else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
        {
            hv_Fonts = new HTuple();
            hv_Fonts[0] = "Luxi Sans";
            hv_Fonts[1] = "DejaVu Sans";
            hv_Fonts[2] = "FreeSans";
            hv_Fonts[3] = "Arial";
            hv_Fonts[4] = "Liberation Sans";
        }
        else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
        {
            hv_Fonts = new HTuple();
            hv_Fonts[0] = "Times New Roman";
            hv_Fonts[1] = "Luxi Serif";
            hv_Fonts[2] = "DejaVu Serif";
            hv_Fonts[3] = "FreeSerif";
            hv_Fonts[4] = "Utopia";
            hv_Fonts[5] = "Liberation Serif";
        }
        else
        {
            hv_Fonts = hv_Font_COPY_INP_TMP.Clone();
        }
        hv_Style = "";
        if ((int)(new HTuple(hv_Bold.TupleEqual("true"))) != 0)
        {
            hv_Style = hv_Style + "Bold";
        }
        else if ((int)(new HTuple(hv_Bold.TupleNotEqual("false"))) != 0)
        {
            hv_Exception = "Wrong value of control parameter Bold";
            throw new HalconException(hv_Exception);
        }
        if ((int)(new HTuple(hv_Slant.TupleEqual("true"))) != 0)
        {
            hv_Style = hv_Style + "Italic";
        }
        else if ((int)(new HTuple(hv_Slant.TupleNotEqual("false"))) != 0)
        {
            hv_Exception = "Wrong value of control parameter Slant";
            throw new HalconException(hv_Exception);
        }
        if ((int)(new HTuple(hv_Style.TupleEqual(""))) != 0)
        {
            hv_Style = "Normal";
        }
        HOperatorSet.QueryFont(hv_ExpDefaultWinHandle, out hv_AvailableFonts);
        hv_Font_COPY_INP_TMP = "";
        for (hv_Fdx = 0; (int)hv_Fdx <= (int)((new HTuple(hv_Fonts.TupleLength())) - 1); hv_Fdx = (int)hv_Fdx + 1)
        {
            hv_Indices = hv_AvailableFonts.TupleFind(hv_Fonts.TupleSelect(hv_Fdx));
            if ((int)(new HTuple((new HTuple(hv_Indices.TupleLength())).TupleGreater(0))) != 0)
            {
                if ((int)(new HTuple(((hv_Indices.TupleSelect(0))).TupleGreaterEqual(0))) != 0)
                {
                    hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(hv_Fdx);
                    break;
                }
            }
        }
        if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(""))) != 0)
        {
            throw new HalconException("Wrong value of control parameter Font");
        }
        hv_Font_COPY_INP_TMP = (((hv_Font_COPY_INP_TMP + "-") + hv_Style) + "-") + hv_Size_COPY_INP_TMP;
        HOperatorSet.SetFont(hv_ExpDefaultWinHandle, hv_Font_COPY_INP_TMP);

        return;
    }

    // Local procedures 
    public void get_defect_aberration(HObject ho_Image, out HObject ho_ImageWithDefect,
        HTuple hv_standardTupleL, HTuple hv_standardTupleA, HTuple hv_standardTupleB,
        out HTuple hv_defectNumber, out HTuple hv_tupleDefectX, out HTuple hv_tupleDefectY,
        out HTuple hv_tupleDefectRadius, out HTuple hv_clothAberration, out HTuple hv_L,
        out HTuple hv_A, out HTuple hv_B, out HTuple hv_minWidth, out HTuple hv_maxWidth,
        out HTuple hv_meanWidth)
    {




        // Stack for temporary objects 
        HObject[] OTemp = new HObject[20];

        // Local iconic variables 

        HObject ho_DefectRegion, ho_GrayImage, ho_Rectangle;
        HObject ho_ImageR0 = null, ho_ImageG0 = null, ho_ImageB0 = null;
        HObject ho_ImageL = null, ho_ImageA = null, ho_ImageB = null;
        HObject ho_MidRectangle = null, ho_LeftRectangle = null, ho_RightRectangle = null;
        HObject ho_Regions1 = null, ho_ConnectedRegions4 = null, ho_Rectangle1 = null;
        HObject ho_Rectangle2 = null, ho_RegionUnion1 = null, ho_RegionUnion2 = null;
        HObject ho_RegionOpening1 = null, ho_ConnectedRegions1 = null;
        HObject ho_SelectedRegions1 = null, ho_ClothRegion = null, ho_SortedRegions = null;
        HObject ho_ObjectSelected1 = null, ho_ObjectSelected2 = null;
        HObject ho_ConnectedRegions2 = null, ho_ObjectSelected = null;
        HObject ho_Rectangle3 = null, ho_Rectangle31 = null, ho_RegionDifference1 = null;
        HObject ho_Boxs = null, ho_ImageReduced = null, ho_ImageMedian = null;
        HObject ho_Region1 = null, ho_ImageMedianReduced = null, ho_ImageR = null;
        HObject ho_ImageG = null, ho_Contours = null, ho_ContoursSplit = null;
        HObject ho_UnionContours = null, ho_SelectedContours1 = null;
        HObject ho_SelectedContours2 = null, ho_ObjectsConcat = null;
        HObject ho_SelectedContours = null, ho_RegionIntersection1 = null;
        HObject ho_RegionTrans = null, ho_RegionDifference = null, ho_RegionOpening = null;
        HObject ho_ConnectedRegions = null, ho_SelectedRegions2 = null;
        HObject ho_ValidClothRegionGrayImage = null, ho_ImageMean1 = null;
        HObject ho_ImageMean2 = null, ho_RegionDynThresh = null, ho_ImageMean = null;
        HObject ho_ImageSub = null, ho_LightRegion = null, ho_LowGrayRegion = null;
        HObject ho_RegionUnion4 = null, ho_RegionErosion = null, ho_RegionIntersection = null;
        HObject ho_ConnectedRegions3 = null, ho_SelectedRegions3 = null;
        HObject ho_SelectedRegions4 = null, ho_SelectedRegions5 = null;

        // Local copy input parameter variables 
        HObject ho_Image_COPY_INP_TMP;
        ho_Image_COPY_INP_TMP = ho_Image.CopyObj(1, -1);



        // Local control variables 

        HTuple hv_windowHandle = new HTuple(), hv_magnification = null;
        HTuple hv_leftSide = null, hv_rightSide = null, hv_boxNumber = null;
        HTuple hv_boxWidth = null, hv_boxHeight = null, hv_boxBenginX = null;
        HTuple hv_dynThresh = null, hv_medianKernal = null, hv_thresh = null;
        HTuple hv_defectArea = null, hv_defectWidth = null, hv_defectHeight = null;
        HTuple hv_edgeRollSlope = null, hv_imperfectBorderWidth = null;
        HTuple hv_clothAberrationGrad1 = null, hv_clothAberrationGrad2 = null;
        HTuple hv_clothAberrationGrad3 = null, hv_clothAberrationGrad4 = null;
        HTuple hv_clothSideUnDetectWidth = null, hv_tupleDetectResult = null;
        HTuple hv_messageShowRow = null, hv_defectLoactionNumber = null;
        HTuple hv_result = null, hv_Width = null, hv_Height = null;
        HTuple hv_Mean = null, hv_Deviation = null, hv_message = new HTuple();
        HTuple hv_DeviceIdentifier = null, hv_hasTransFormRGB = null;
        HTuple hv_DeviceHandle = new HTuple(), hv_Mean11 = new HTuple();
        HTuple hv_Deviation11 = new HTuple(), hv_Mean12 = new HTuple();
        HTuple hv_Deviation12 = new HTuple(), hv_Mean13 = new HTuple();
        HTuple hv_Deviation13 = new HTuple(), hv_Max1 = new HTuple();
        HTuple hv_Mean21 = new HTuple(), hv_Mean22 = new HTuple();
        HTuple hv_Mean23 = new HTuple(), hv_Max2 = new HTuple();
        HTuple hv_Mean31 = new HTuple(), hv_Mean32 = new HTuple();
        HTuple hv_Mean33 = new HTuple(), hv_Max3 = new HTuple();
        HTuple hv_Number = new HTuple(), hv_AbsoluteHisto = new HTuple();
        HTuple hv_RelativeHisto = new HTuple(), hv_MinThresh = new HTuple();
        HTuple hv_MaxThresh = new HTuple(), hv_Row11 = new HTuple();
        HTuple hv_Column11 = new HTuple(), hv_Row21 = new HTuple();
        HTuple hv_Column21 = new HTuple(), hv_Row12 = new HTuple();
        HTuple hv_Column12 = new HTuple(), hv_Row22 = new HTuple();
        HTuple hv_Column22 = new HTuple(), hv_Convexity1 = new HTuple();
        HTuple hv_Convexity2 = new HTuple(), hv_Number2 = new HTuple();
        HTuple hv_tempMessage = new HTuple(), hv_i = new HTuple();
        HTuple hv_Row14 = new HTuple(), hv_Column14 = new HTuple();
        HTuple hv_Row24 = new HTuple(), hv_Column24 = new HTuple();
        HTuple hv_Length = new HTuple(), hv_boxDistance = new HTuple();
        HTuple hv_boxBenginY = new HTuple(), hv_tupleDeviationL = new HTuple();
        HTuple hv_tupleDeviationA = new HTuple(), hv_tupleDeviationB = new HTuple();
        HTuple hv_MeanL = new HTuple(), hv_DeviationL = new HTuple();
        HTuple hv_MeanA = new HTuple(), hv_DeviationA = new HTuple();
        HTuple hv_MeanB = new HTuple(), hv_DeviationB = new HTuple();
        HTuple hv_tupleL = new HTuple(), hv_tupleA = new HTuple();
        HTuple hv_tupleB = new HTuple(), hv_aberrations = new HTuple();
        HTuple hv_j = new HTuple(), hv_a = new HTuple(), hv_aberrations1 = new HTuple();
        HTuple hv_tupleL1 = new HTuple(), hv_tupleA1 = new HTuple();
        HTuple hv_tupleB1 = new HTuple(), hv_total = new HTuple();
        HTuple hv_totalL = new HTuple(), hv_totalA = new HTuple();
        HTuple hv_totalB = new HTuple(), hv_k = new HTuple(), hv_Row1 = new HTuple();
        HTuple hv_Column1 = new HTuple(), hv_Row2 = new HTuple();
        HTuple hv_Column2 = new HTuple(), hv_Number1 = new HTuple();
        HTuple hv_Area3 = new HTuple(), hv_Row3 = new HTuple();
        HTuple hv_Column3 = new HTuple(), hv_in = new HTuple();
        HTuple hv_Row13 = new HTuple(), hv_Column13 = new HTuple();
        HTuple hv_Row23 = new HTuple(), hv_Column23 = new HTuple();
        HTuple hv_Number3 = new HTuple(), hv_Row = new HTuple();
        HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_ImageWithDefect);
        HOperatorSet.GenEmptyObj(out ho_DefectRegion);
        HOperatorSet.GenEmptyObj(out ho_GrayImage);
        HOperatorSet.GenEmptyObj(out ho_Rectangle);
        HOperatorSet.GenEmptyObj(out ho_ImageR0);
        HOperatorSet.GenEmptyObj(out ho_ImageG0);
        HOperatorSet.GenEmptyObj(out ho_ImageB0);
        HOperatorSet.GenEmptyObj(out ho_ImageL);
        HOperatorSet.GenEmptyObj(out ho_ImageA);
        HOperatorSet.GenEmptyObj(out ho_ImageB);
        HOperatorSet.GenEmptyObj(out ho_MidRectangle);
        HOperatorSet.GenEmptyObj(out ho_LeftRectangle);
        HOperatorSet.GenEmptyObj(out ho_RightRectangle);
        HOperatorSet.GenEmptyObj(out ho_Regions1);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions4);
        HOperatorSet.GenEmptyObj(out ho_Rectangle1);
        HOperatorSet.GenEmptyObj(out ho_Rectangle2);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion1);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion2);
        HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_ClothRegion);
        HOperatorSet.GenEmptyObj(out ho_SortedRegions);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected2);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
        HOperatorSet.GenEmptyObj(out ho_Rectangle3);
        HOperatorSet.GenEmptyObj(out ho_Rectangle31);
        HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
        HOperatorSet.GenEmptyObj(out ho_Boxs);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_ImageMedian);
        HOperatorSet.GenEmptyObj(out ho_Region1);
        HOperatorSet.GenEmptyObj(out ho_ImageMedianReduced);
        HOperatorSet.GenEmptyObj(out ho_ImageR);
        HOperatorSet.GenEmptyObj(out ho_ImageG);
        HOperatorSet.GenEmptyObj(out ho_Contours);
        HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
        HOperatorSet.GenEmptyObj(out ho_UnionContours);
        HOperatorSet.GenEmptyObj(out ho_SelectedContours1);
        HOperatorSet.GenEmptyObj(out ho_SelectedContours2);
        HOperatorSet.GenEmptyObj(out ho_ObjectsConcat);
        HOperatorSet.GenEmptyObj(out ho_SelectedContours);
        HOperatorSet.GenEmptyObj(out ho_RegionIntersection1);
        HOperatorSet.GenEmptyObj(out ho_RegionTrans);
        HOperatorSet.GenEmptyObj(out ho_RegionDifference);
        HOperatorSet.GenEmptyObj(out ho_RegionOpening);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_ValidClothRegionGrayImage);
        HOperatorSet.GenEmptyObj(out ho_ImageMean1);
        HOperatorSet.GenEmptyObj(out ho_ImageMean2);
        HOperatorSet.GenEmptyObj(out ho_RegionDynThresh);
        HOperatorSet.GenEmptyObj(out ho_ImageMean);
        HOperatorSet.GenEmptyObj(out ho_ImageSub);
        HOperatorSet.GenEmptyObj(out ho_LightRegion);
        HOperatorSet.GenEmptyObj(out ho_LowGrayRegion);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion4);
        HOperatorSet.GenEmptyObj(out ho_RegionErosion);
        HOperatorSet.GenEmptyObj(out ho_RegionIntersection);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions3);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions4);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions5);
        hv_minWidth = new HTuple();
        hv_maxWidth = new HTuple();
        hv_meanWidth = new HTuple();
        try
        {

            //*********************输入参数
            //magnification放大率piexels/mm
            //LeftSide左边有效参数
            //RightSide右边有效参数
            //boxNumber框个数
            //boxWidth框宽度
            //boxHeight框高度
            //boxBenginX框起始X坐标
            //dynThresh缺陷阈值
            //medianKernal滤波卷积核大小
            //defectArea缺陷面积
            //edgeRollSlope判断卷边的斜率偏差
            //imperfectBorderWidth判断缺边的宽度
            //leftSide左边有效区域
            //rightSide右边有效区域
            //clothAberrationGrad1-clothAberrationGrad4色差等级分类
            //布匹边缘不检测宽度clothSideUnDetectWidth
            //*****************************
            hv_windowHandle = 3600;
           

            hv_magnification = 4.8188;
            hv_leftSide = 41.5040;
            hv_rightSide = 41.5040;
            hv_boxNumber = 6;
            hv_boxWidth = 83;
            hv_boxHeight = 83;
            hv_boxBenginX = 200;
            hv_dynThresh = 15;
            hv_medianKernal = 20;
            hv_thresh = 30;
            hv_defectArea = 0.2157;
            hv_defectWidth = 1.0393;
            hv_defectHeight = 1.0393;
            hv_edgeRollSlope = 0.1;
            hv_imperfectBorderWidth = 4.15;
            hv_clothAberrationGrad1 = 0.5;
            hv_clothAberrationGrad2 = 1.5;
            hv_clothAberrationGrad3 = 3.0;
            hv_clothAberrationGrad4 = 6.0;
            hv_clothSideUnDetectWidth = 20.7;

            hv_leftSide = hv_leftSide * hv_magnification;
            hv_rightSide = hv_rightSide * hv_magnification;
            hv_boxWidth = hv_boxWidth * hv_magnification;
            hv_boxHeight = hv_boxHeight * hv_magnification;
            hv_boxBenginX = hv_boxBenginX * hv_magnification;
            hv_defectArea = (hv_defectArea * hv_magnification) * hv_magnification;
            hv_defectWidth = hv_defectWidth * hv_magnification;
            hv_defectHeight = hv_defectHeight * hv_magnification;
            hv_imperfectBorderWidth = hv_imperfectBorderWidth * hv_magnification;
            hv_clothSideUnDetectWidth = hv_clothSideUnDetectWidth * hv_magnification;
            hv_ExpDefaultWinHandle = hv_windowHandle;

           // set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");


            //***********************************
            //tupleDetectResult表示各个缺陷的个数,>0为有缺陷
            //tupleDetectResult[0]表示周期性缺陷个数，严重，亮红灯
            //tupleDetectResult[1]表示卷边，严重，亮红灯
            //tupleDetectResult[2]表示缺边个数，黄灯
            //tupleDetectResult[3]表示点瑕疵个数，黄灯
            //***********************************
            hv_tupleDetectResult = new HTuple();
            hv_tupleDetectResult[0] = 0;
            hv_tupleDetectResult[1] = 0;
            hv_tupleDetectResult[2] = 0;
            hv_tupleDetectResult[3] = 0;
            hv_tupleDetectResult[4] = 0;
            hv_tupleDetectResult[5] = 0;
            hv_tupleDetectResult[6] = 0;
            hv_tupleDetectResult[7] = 0;
            hv_tupleDetectResult[8] = 0;
            hv_tupleDetectResult[9] = 0;
            //瑕疵半径
            hv_tupleDefectRadius = new HTuple();
            //瑕疵X坐标
            hv_tupleDefectX = new HTuple();
            //瑕疵Y坐标
            hv_tupleDefectY = new HTuple();
            //布匹边缘不检测宽度
            hv_clothSideUnDetectWidth = 100;
            HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 3);
            //显示消息逐行增加
            hv_messageShowRow = 5;
            //检测缺陷的个数
            hv_defectNumber = 0;
            //defectLoactionNumber缺陷位置编号
            hv_defectLoactionNumber = 1;
            hv_result = 0;
            hv_L = 0;
            hv_A = 0;
            hv_B = 0;
            hv_clothAberration = 0;
            ho_DefectRegion.Dispose();
            HOperatorSet.GenEmptyObj(out ho_DefectRegion);
            hv_result = 0;
            HOperatorSet.GetImageSize(ho_Image_COPY_INP_TMP, out hv_Width, out hv_Height);
            //裁减无效区域
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.CropPart(ho_Image_COPY_INP_TMP, out ExpTmpOutVar_0, 0, hv_leftSide,
                    (hv_Width - hv_leftSide) - hv_rightSide, hv_Height);
                ho_Image_COPY_INP_TMP.Dispose();
                ho_Image_COPY_INP_TMP = ExpTmpOutVar_0;
            }
            set_display_font(hv_ExpDefaultWinHandle, 20, "mono", "true", "false");
            HOperatorSet.DispObj(ho_Image_COPY_INP_TMP, hv_ExpDefaultWinHandle);
            HOperatorSet.GetImageSize(ho_Image_COPY_INP_TMP, out hv_Width, out hv_Height);
            ho_GrayImage.Dispose();
            HOperatorSet.Rgb1ToGray(ho_Image_COPY_INP_TMP, out ho_GrayImage);
            ho_ImageWithDefect.Dispose();
            HOperatorSet.CopyImage(ho_Image_COPY_INP_TMP, out ho_ImageWithDefect);

            //***********************************获取底部图像，计算灰度值判断图像是否过暗或者过亮
            ho_Rectangle.Dispose();
            HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Height - 1000, 1000, hv_Height,
                hv_Width - 1000);
            HOperatorSet.Intensity(ho_Rectangle, ho_GrayImage, out hv_Mean, out hv_Deviation);
            if ((int)(new HTuple(hv_Mean.TupleGreater(230))) != 0)
            {
                hv_result = 10;
                hv_message = "标准色差获取失败，图片过亮";
                disp_message(hv_ExpDefaultWinHandle, hv_message, "window", hv_messageShowRow * 30,
                    30, "green", "true");
                hv_messageShowRow = hv_messageShowRow + 1;
                ho_Image_COPY_INP_TMP.Dispose();
                ho_DefectRegion.Dispose();
                ho_GrayImage.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageR0.Dispose();
                ho_ImageG0.Dispose();
                ho_ImageB0.Dispose();
                ho_ImageL.Dispose();
                ho_ImageA.Dispose();
                ho_ImageB.Dispose();
                ho_MidRectangle.Dispose();
                ho_LeftRectangle.Dispose();
                ho_RightRectangle.Dispose();
                ho_Regions1.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_Rectangle1.Dispose();
                ho_Rectangle2.Dispose();
                ho_RegionUnion1.Dispose();
                ho_RegionUnion2.Dispose();
                ho_RegionOpening1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_ClothRegion.Dispose();
                ho_SortedRegions.Dispose();
                ho_ObjectSelected1.Dispose();
                ho_ObjectSelected2.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_ObjectSelected.Dispose();
                ho_Rectangle3.Dispose();
                ho_Rectangle31.Dispose();
                ho_RegionDifference1.Dispose();
                ho_Boxs.Dispose();
                ho_ImageReduced.Dispose();
                ho_ImageMedian.Dispose();
                ho_Region1.Dispose();
                ho_ImageMedianReduced.Dispose();
                ho_ImageR.Dispose();
                ho_ImageG.Dispose();
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();
                ho_UnionContours.Dispose();
                ho_SelectedContours1.Dispose();
                ho_SelectedContours2.Dispose();
                ho_ObjectsConcat.Dispose();
                ho_SelectedContours.Dispose();
                ho_RegionIntersection1.Dispose();
                ho_RegionTrans.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions2.Dispose();
                ho_ValidClothRegionGrayImage.Dispose();
                ho_ImageMean1.Dispose();
                ho_ImageMean2.Dispose();
                ho_RegionDynThresh.Dispose();
                ho_ImageMean.Dispose();
                ho_ImageSub.Dispose();
                ho_LightRegion.Dispose();
                ho_LowGrayRegion.Dispose();
                ho_RegionUnion4.Dispose();
                ho_RegionErosion.Dispose();
                ho_RegionIntersection.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegions3.Dispose();
                ho_SelectedRegions4.Dispose();
                ho_SelectedRegions5.Dispose();

                return;
            }
            else
            {
                if ((int)(new HTuple(hv_Mean.TupleLess(20))) != 0)
                {
                    hv_result = 11;
                    hv_message = "标准色差获取失败，图片过暗";
                    disp_message(hv_ExpDefaultWinHandle, hv_message, "window", hv_messageShowRow * 30,
                        30, "green", "true");
                    hv_messageShowRow = hv_messageShowRow + 1;
                    ho_Image_COPY_INP_TMP.Dispose();
                    ho_DefectRegion.Dispose();
                    ho_GrayImage.Dispose();
                    ho_Rectangle.Dispose();
                    ho_ImageR0.Dispose();
                    ho_ImageG0.Dispose();
                    ho_ImageB0.Dispose();
                    ho_ImageL.Dispose();
                    ho_ImageA.Dispose();
                    ho_ImageB.Dispose();
                    ho_MidRectangle.Dispose();
                    ho_LeftRectangle.Dispose();
                    ho_RightRectangle.Dispose();
                    ho_Regions1.Dispose();
                    ho_ConnectedRegions4.Dispose();
                    ho_Rectangle1.Dispose();
                    ho_Rectangle2.Dispose();
                    ho_RegionUnion1.Dispose();
                    ho_RegionUnion2.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_ClothRegion.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_ObjectSelected1.Dispose();
                    ho_ObjectSelected2.Dispose();
                    ho_ConnectedRegions2.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_Rectangle3.Dispose();
                    ho_Rectangle31.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_Boxs.Dispose();
                    ho_ImageReduced.Dispose();
                    ho_ImageMedian.Dispose();
                    ho_Region1.Dispose();
                    ho_ImageMedianReduced.Dispose();
                    ho_ImageR.Dispose();
                    ho_ImageG.Dispose();
                    ho_Contours.Dispose();
                    ho_ContoursSplit.Dispose();
                    ho_UnionContours.Dispose();
                    ho_SelectedContours1.Dispose();
                    ho_SelectedContours2.Dispose();
                    ho_ObjectsConcat.Dispose();
                    ho_SelectedContours.Dispose();
                    ho_RegionIntersection1.Dispose();
                    ho_RegionTrans.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions2.Dispose();
                    ho_ValidClothRegionGrayImage.Dispose();
                    ho_ImageMean1.Dispose();
                    ho_ImageMean2.Dispose();
                    ho_RegionDynThresh.Dispose();
                    ho_ImageMean.Dispose();
                    ho_ImageSub.Dispose();
                    ho_LightRegion.Dispose();
                    ho_LowGrayRegion.Dispose();
                    ho_RegionUnion4.Dispose();
                    ho_RegionErosion.Dispose();
                    ho_RegionIntersection.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegions3.Dispose();
                    ho_SelectedRegions4.Dispose();
                    ho_SelectedRegions5.Dispose();

                    return;
                }
            }
            //***********************************************************************************

            //***********************************查找显卡，将显卡句柄设为DeviceHandle，用于显卡加速
            HOperatorSet.QueryAvailableComputeDevices(out hv_DeviceIdentifier);
            hv_hasTransFormRGB = 0;
            if ((int)(new HTuple((new HTuple(hv_DeviceIdentifier.TupleLength())).TupleGreater(
                0))) != 0)
            {
                //打开第一个显卡？是否第一个显卡都为独显
                HOperatorSet.OpenComputeDevice(hv_DeviceIdentifier.TupleSelect(0), out hv_DeviceHandle);
                //Deactivate asynchronous execution to obtain reliable benchmarks.
                HOperatorSet.SetComputeDeviceParam(hv_DeviceHandle, "asynchronous_execution",
                    "false");
            }
            //***********************************************************************************

            if ((int)(new HTuple(hv_result.TupleEqual(0))) != 0)
            {
                //图像分割是成RGB图
                ho_ImageR0.Dispose(); ho_ImageG0.Dispose(); ho_ImageB0.Dispose();
                HOperatorSet.Decompose3(ho_Image_COPY_INP_TMP, out ho_ImageR0, out ho_ImageG0,
                    out ho_ImageB0);

                //***************************************设置显卡加速算子trans_from_rgb，完成后关闭显卡加速
                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                    0))) != 0)
                {
                    //初始化显卡加速算子
                    HOperatorSet.InitComputeDevice(hv_DeviceHandle, " trans_from_rgb ");
                    //激活显卡加速
                    HOperatorSet.ActivateComputeDevice(hv_DeviceHandle);
                }
                //将图像转换为LAB图像
                ho_ImageL.Dispose(); ho_ImageA.Dispose(); ho_ImageB.Dispose();
                HOperatorSet.TransFromRgb(ho_ImageR0, ho_ImageG0, ho_ImageB0, out ho_ImageL,
                    out ho_ImageA, out ho_ImageB, "cielab");
                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                    0))) != 0)
                {
                    //关闭显卡加速
                    HOperatorSet.DeactivateComputeDevice(hv_DeviceHandle);
                }
                //***********************************************************************************

                //***********************************************************************************
                //分别计算LAB图像布匹中间与两边的灰度差，将灰度差较大的作为布匹区域分割对象
                //***********************************************************************************
                ho_MidRectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_MidRectangle, (hv_Height / 2) - 300, (hv_Width / 2) - 300,
                    (hv_Height / 2) + 300, (hv_Width / 2) + 300);
                ho_LeftRectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_LeftRectangle, (hv_Height / 2) - 300, 20, (hv_Height / 2) + 300,
                    150);
                ho_RightRectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_RightRectangle, (hv_Height / 2) - 300, hv_Width - 150,
                    (hv_Height / 2) + 300, hv_Width - 20);
                HOperatorSet.Intensity(ho_MidRectangle, ho_ImageL, out hv_Mean11, out hv_Deviation11);
                HOperatorSet.Intensity(ho_LeftRectangle, ho_ImageL, out hv_Mean12, out hv_Deviation12);
                HOperatorSet.Intensity(ho_RightRectangle, ho_ImageL, out hv_Mean13, out hv_Deviation13);
                HOperatorSet.TupleMax2(hv_Mean11 - hv_Mean12, hv_Mean11 - hv_Mean13, out hv_Max1);
                HOperatorSet.TupleAbs(hv_Max1, out hv_Max1);

                HOperatorSet.Intensity(ho_MidRectangle, ho_ImageA, out hv_Mean21, out hv_Deviation11);
                HOperatorSet.Intensity(ho_LeftRectangle, ho_ImageA, out hv_Mean22, out hv_Deviation12);
                HOperatorSet.Intensity(ho_RightRectangle, ho_ImageA, out hv_Mean23, out hv_Deviation13);
                HOperatorSet.TupleMax2(hv_Mean21 - hv_Mean22, hv_Mean21 - hv_Mean23, out hv_Max2);
                HOperatorSet.TupleAbs(hv_Max2, out hv_Max2);

                HOperatorSet.Intensity(ho_MidRectangle, ho_ImageB, out hv_Mean31, out hv_Deviation11);
                HOperatorSet.Intensity(ho_LeftRectangle, ho_ImageB, out hv_Mean32, out hv_Deviation12);
                HOperatorSet.Intensity(ho_RightRectangle, ho_ImageB, out hv_Mean33, out hv_Deviation13);
                HOperatorSet.TupleMax2(hv_Mean31 - hv_Mean32, hv_Mean31 - hv_Mean33, out hv_Max3);
                HOperatorSet.TupleAbs(hv_Max3, out hv_Max3);
                //***********************************************************************************

                //***********************************************************************************
                //如AB图像的灰度差<5,且L图像灰度差小于10，则未找到布匹，否则分割布匹区域，SelectedRegions1
                //***********************************************************************************
                hv_Number = 0;
                if ((int)((new HTuple((new HTuple(hv_Max2.TupleLess(5))).TupleAnd(new HTuple(hv_Max3.TupleLess(
                    5))))).TupleAnd(new HTuple(hv_Max1.TupleLess(10)))) != 0)
                {
                    //未找到布匹
                    hv_result = 1;
                    disp_message(hv_ExpDefaultWinHandle, "未找到布匹", "window", 30, 30,
                        "red", "true");
                    hv_messageShowRow = hv_messageShowRow + 1;
                    ho_Image_COPY_INP_TMP.Dispose();
                    ho_DefectRegion.Dispose();
                    ho_GrayImage.Dispose();
                    ho_Rectangle.Dispose();
                    ho_ImageR0.Dispose();
                    ho_ImageG0.Dispose();
                    ho_ImageB0.Dispose();
                    ho_ImageL.Dispose();
                    ho_ImageA.Dispose();
                    ho_ImageB.Dispose();
                    ho_MidRectangle.Dispose();
                    ho_LeftRectangle.Dispose();
                    ho_RightRectangle.Dispose();
                    ho_Regions1.Dispose();
                    ho_ConnectedRegions4.Dispose();
                    ho_Rectangle1.Dispose();
                    ho_Rectangle2.Dispose();
                    ho_RegionUnion1.Dispose();
                    ho_RegionUnion2.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_ClothRegion.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_ObjectSelected1.Dispose();
                    ho_ObjectSelected2.Dispose();
                    ho_ConnectedRegions2.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_Rectangle3.Dispose();
                    ho_Rectangle31.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_Boxs.Dispose();
                    ho_ImageReduced.Dispose();
                    ho_ImageMedian.Dispose();
                    ho_Region1.Dispose();
                    ho_ImageMedianReduced.Dispose();
                    ho_ImageR.Dispose();
                    ho_ImageG.Dispose();
                    ho_Contours.Dispose();
                    ho_ContoursSplit.Dispose();
                    ho_UnionContours.Dispose();
                    ho_SelectedContours1.Dispose();
                    ho_SelectedContours2.Dispose();
                    ho_ObjectsConcat.Dispose();
                    ho_SelectedContours.Dispose();
                    ho_RegionIntersection1.Dispose();
                    ho_RegionTrans.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions2.Dispose();
                    ho_ValidClothRegionGrayImage.Dispose();
                    ho_ImageMean1.Dispose();
                    ho_ImageMean2.Dispose();
                    ho_RegionDynThresh.Dispose();
                    ho_ImageMean.Dispose();
                    ho_ImageSub.Dispose();
                    ho_LightRegion.Dispose();
                    ho_LowGrayRegion.Dispose();
                    ho_RegionUnion4.Dispose();
                    ho_RegionErosion.Dispose();
                    ho_RegionIntersection.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegions3.Dispose();
                    ho_SelectedRegions4.Dispose();
                    ho_SelectedRegions5.Dispose();

                    return;
                }
                else
                {
                    if ((int)((new HTuple(hv_Max2.TupleGreater(5))).TupleOr(new HTuple(hv_Max3.TupleGreater(
                        5)))) != 0)
                    {
                        if ((int)(new HTuple(hv_Max2.TupleGreater(hv_Max3))) != 0)
                        {
                            HOperatorSet.GrayHisto(ho_ImageA, ho_ImageA, out hv_AbsoluteHisto,
                                out hv_RelativeHisto);
                            HOperatorSet.HistoToThresh(hv_AbsoluteHisto, 4, out hv_MinThresh, out hv_MaxThresh);
                            ho_Regions1.Dispose();
                            HOperatorSet.Threshold(ho_ImageA, out ho_Regions1, hv_MinThresh, hv_MaxThresh);
                        }
                        else
                        {
                            HOperatorSet.GrayHisto(ho_ImageB, ho_ImageB, out hv_AbsoluteHisto,
                                out hv_RelativeHisto);
                            HOperatorSet.HistoToThresh(hv_AbsoluteHisto, 4, out hv_MinThresh, out hv_MaxThresh);
                            ho_Regions1.Dispose();
                            HOperatorSet.Threshold(ho_ImageB, out ho_Regions1, hv_MinThresh, hv_MaxThresh);
                            //auto_threshold (ImageB, Regions1, 1)
                        }

                    }
                    else
                    {
                        HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
                        HOperatorSet.GrayHisto(ho_ImageL, ho_ImageL, out hv_AbsoluteHisto, out hv_RelativeHisto);
                        HOperatorSet.HistoToThresh(hv_AbsoluteHisto, 4, out hv_MinThresh, out hv_MaxThresh);
                        ho_Regions1.Dispose();
                        HOperatorSet.Threshold(ho_ImageL, out ho_Regions1, hv_MinThresh, hv_MaxThresh);
                    }
                    ho_ConnectedRegions4.Dispose();
                    HOperatorSet.Connection(ho_Regions1, out ho_ConnectedRegions4);
                    ho_Regions1.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions4, out ho_Regions1, (new HTuple("height")).TupleConcat(
                        "column"), "and", ((hv_Height - 100)).TupleConcat(200), ((hv_Height + 100)).TupleConcat(
                        hv_Width - 200));

                    //***********************************************************************************
                    //防止周期性缺陷
                    //***********************************************************************************
                    ho_Rectangle1.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle1, 1, 50, 3, hv_Width - 50);
                    ho_Rectangle2.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle2, hv_Height - 3, 50, hv_Height,
                        hv_Width - 50);
                    ho_RegionUnion1.Dispose();
                    HOperatorSet.Union2(ho_Rectangle1, ho_Rectangle2, out ho_RegionUnion1);
                    ho_RegionUnion2.Dispose();
                    HOperatorSet.Union2(ho_RegionUnion1, ho_Regions1, out ho_RegionUnion2);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.FillUp(ho_RegionUnion2, out ExpTmpOutVar_0);
                        ho_RegionUnion2.Dispose();
                        ho_RegionUnion2 = ExpTmpOutVar_0;
                    }
                    ho_RegionOpening1.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionUnion2, out ho_RegionOpening1,
                        1, 7);
                    //***********************************************************************************
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionOpening1, out ho_ConnectedRegions1);
                    ho_SelectedRegions1.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1,
                        (new HTuple("width")).TupleConcat("height"), "and", ((hv_Width / 20)).TupleConcat(
                        hv_Height - 100), ((hv_Width - 100)).TupleConcat(hv_Height + 100));
                    HOperatorSet.CountObj(ho_SelectedRegions1, out hv_Number);
                }
                //***********************************************************************************

                if ((int)(new HTuple(hv_result.TupleEqual(0))) != 0)
                {
                    ho_ClothRegion.Dispose();
                    HOperatorSet.FillUp(ho_SelectedRegions1, out ho_ClothRegion);
                    if ((int)(new HTuple(hv_Number.TupleEqual(0))) != 0)
                    {
                        //未找到布匹
                        hv_result = 1;
                        disp_message(hv_ExpDefaultWinHandle, "未找到布匹", "window", 30,
                            30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                        ho_Image_COPY_INP_TMP.Dispose();
                        ho_DefectRegion.Dispose();
                        ho_GrayImage.Dispose();
                        ho_Rectangle.Dispose();
                        ho_ImageR0.Dispose();
                        ho_ImageG0.Dispose();
                        ho_ImageB0.Dispose();
                        ho_ImageL.Dispose();
                        ho_ImageA.Dispose();
                        ho_ImageB.Dispose();
                        ho_MidRectangle.Dispose();
                        ho_LeftRectangle.Dispose();
                        ho_RightRectangle.Dispose();
                        ho_Regions1.Dispose();
                        ho_ConnectedRegions4.Dispose();
                        ho_Rectangle1.Dispose();
                        ho_Rectangle2.Dispose();
                        ho_RegionUnion1.Dispose();
                        ho_RegionUnion2.Dispose();
                        ho_RegionOpening1.Dispose();
                        ho_ConnectedRegions1.Dispose();
                        ho_SelectedRegions1.Dispose();
                        ho_ClothRegion.Dispose();
                        ho_SortedRegions.Dispose();
                        ho_ObjectSelected1.Dispose();
                        ho_ObjectSelected2.Dispose();
                        ho_ConnectedRegions2.Dispose();
                        ho_ObjectSelected.Dispose();
                        ho_Rectangle3.Dispose();
                        ho_Rectangle31.Dispose();
                        ho_RegionDifference1.Dispose();
                        ho_Boxs.Dispose();
                        ho_ImageReduced.Dispose();
                        ho_ImageMedian.Dispose();
                        ho_Region1.Dispose();
                        ho_ImageMedianReduced.Dispose();
                        ho_ImageR.Dispose();
                        ho_ImageG.Dispose();
                        ho_Contours.Dispose();
                        ho_ContoursSplit.Dispose();
                        ho_UnionContours.Dispose();
                        ho_SelectedContours1.Dispose();
                        ho_SelectedContours2.Dispose();
                        ho_ObjectsConcat.Dispose();
                        ho_SelectedContours.Dispose();
                        ho_RegionIntersection1.Dispose();
                        ho_RegionTrans.Dispose();
                        ho_RegionDifference.Dispose();
                        ho_RegionOpening.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions2.Dispose();
                        ho_ValidClothRegionGrayImage.Dispose();
                        ho_ImageMean1.Dispose();
                        ho_ImageMean2.Dispose();
                        ho_RegionDynThresh.Dispose();
                        ho_ImageMean.Dispose();
                        ho_ImageSub.Dispose();
                        ho_LightRegion.Dispose();
                        ho_LowGrayRegion.Dispose();
                        ho_RegionUnion4.Dispose();
                        ho_RegionErosion.Dispose();
                        ho_RegionIntersection.Dispose();
                        ho_ConnectedRegions3.Dispose();
                        ho_SelectedRegions3.Dispose();
                        ho_SelectedRegions4.Dispose();
                        ho_SelectedRegions5.Dispose();

                        return;
                    }
                    else if ((int)(new HTuple(hv_Number.TupleGreater(1))) != 0)
                    {
                        ho_SortedRegions.Dispose();
                        HOperatorSet.SortRegion(ho_ClothRegion, out ho_SortedRegions, "first_point",
                            "true", "row");
                        ho_ObjectSelected1.Dispose();
                        HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected1, 1);
                        ho_ObjectSelected2.Dispose();
                        HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected2, 2);
                        HOperatorSet.SmallestRectangle1(ho_ObjectSelected1, out hv_Row11, out hv_Column11,
                            out hv_Row21, out hv_Column21);
                        HOperatorSet.SmallestRectangle1(ho_ObjectSelected2, out hv_Row12, out hv_Column12,
                            out hv_Row22, out hv_Column22);
                        HOperatorSet.Convexity(ho_ObjectSelected1, out hv_Convexity1);
                        HOperatorSet.Convexity(ho_ObjectSelected2, out hv_Convexity2);
                        if ((int)((new HTuple((new HTuple(hv_Column11.TupleLess(2))).TupleAnd(
                            new HTuple(hv_Column22.TupleGreater(hv_Height - 2))))).TupleAnd((new HTuple(hv_Convexity1.TupleLess(
                            0.97))).TupleOr(new HTuple(hv_Convexity2.TupleLess(0.97))))) != 0)
                        {
                            //接缝布匹
                            hv_result = 2;
                            disp_message(hv_ExpDefaultWinHandle, "布匹有接缝或者横向长缺陷",
                                "window", hv_messageShowRow * 30, 30, "red", "true");
                            hv_messageShowRow = hv_messageShowRow + 1;
                            ho_Image_COPY_INP_TMP.Dispose();
                            ho_DefectRegion.Dispose();
                            ho_GrayImage.Dispose();
                            ho_Rectangle.Dispose();
                            ho_ImageR0.Dispose();
                            ho_ImageG0.Dispose();
                            ho_ImageB0.Dispose();
                            ho_ImageL.Dispose();
                            ho_ImageA.Dispose();
                            ho_ImageB.Dispose();
                            ho_MidRectangle.Dispose();
                            ho_LeftRectangle.Dispose();
                            ho_RightRectangle.Dispose();
                            ho_Regions1.Dispose();
                            ho_ConnectedRegions4.Dispose();
                            ho_Rectangle1.Dispose();
                            ho_Rectangle2.Dispose();
                            ho_RegionUnion1.Dispose();
                            ho_RegionUnion2.Dispose();
                            ho_RegionOpening1.Dispose();
                            ho_ConnectedRegions1.Dispose();
                            ho_SelectedRegions1.Dispose();
                            ho_ClothRegion.Dispose();
                            ho_SortedRegions.Dispose();
                            ho_ObjectSelected1.Dispose();
                            ho_ObjectSelected2.Dispose();
                            ho_ConnectedRegions2.Dispose();
                            ho_ObjectSelected.Dispose();
                            ho_Rectangle3.Dispose();
                            ho_Rectangle31.Dispose();
                            ho_RegionDifference1.Dispose();
                            ho_Boxs.Dispose();
                            ho_ImageReduced.Dispose();
                            ho_ImageMedian.Dispose();
                            ho_Region1.Dispose();
                            ho_ImageMedianReduced.Dispose();
                            ho_ImageR.Dispose();
                            ho_ImageG.Dispose();
                            ho_Contours.Dispose();
                            ho_ContoursSplit.Dispose();
                            ho_UnionContours.Dispose();
                            ho_SelectedContours1.Dispose();
                            ho_SelectedContours2.Dispose();
                            ho_ObjectsConcat.Dispose();
                            ho_SelectedContours.Dispose();
                            ho_RegionIntersection1.Dispose();
                            ho_RegionTrans.Dispose();
                            ho_RegionDifference.Dispose();
                            ho_RegionOpening.Dispose();
                            ho_ConnectedRegions.Dispose();
                            ho_SelectedRegions2.Dispose();
                            ho_ValidClothRegionGrayImage.Dispose();
                            ho_ImageMean1.Dispose();
                            ho_ImageMean2.Dispose();
                            ho_RegionDynThresh.Dispose();
                            ho_ImageMean.Dispose();
                            ho_ImageSub.Dispose();
                            ho_LightRegion.Dispose();
                            ho_LowGrayRegion.Dispose();
                            ho_RegionUnion4.Dispose();
                            ho_RegionErosion.Dispose();
                            ho_RegionIntersection.Dispose();
                            ho_ConnectedRegions3.Dispose();
                            ho_SelectedRegions3.Dispose();
                            ho_SelectedRegions4.Dispose();
                            ho_SelectedRegions5.Dispose();

                            return;
                        }
                        else
                        {
                            //布匹有周期性缺陷
                            hv_result = 3;
                            ho_DefectRegion.Dispose();
                            HOperatorSet.SelectShape(ho_ClothRegion, out ho_DefectRegion, "height",
                                "and", hv_Height - 100, hv_Height);
                            ho_ConnectedRegions2.Dispose();
                            HOperatorSet.Connection(ho_DefectRegion, out ho_ConnectedRegions2);
                            HOperatorSet.CountObj(ho_ConnectedRegions2, out hv_Number2);
                            //周期性缺陷++
                            if (hv_tupleDetectResult == null)
                                hv_tupleDetectResult = new HTuple();
                            hv_tupleDetectResult[0] = (hv_tupleDetectResult.TupleSelect(0)) + hv_Number2;
                            hv_tempMessage = hv_defectLoactionNumber.Clone();
                            HTuple end_val247 = hv_Number2;
                            HTuple step_val247 = 1;
                            for (hv_i = 1; hv_i.Continue(end_val247, step_val247); hv_i = hv_i.TupleAdd(step_val247))
                            {
                                if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                                {
                                    hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                                }
                                ho_ObjectSelected.Dispose();
                                HOperatorSet.SelectObj(ho_ConnectedRegions2, out ho_ObjectSelected,
                                    hv_i);
                                HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14,
                                    out hv_Column14, out hv_Row24, out hv_Column24);
                                ho_Rectangle3.Dispose();
                                HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                    hv_Row24 + 30, hv_Column24 + 30);
                                //画缺陷框
                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                                ho_Rectangle31.Dispose();
                                HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                                ho_RegionDifference1.Dispose();
                                HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                    );
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                        out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                        0), "fill");
                                    ho_ImageWithDefect.Dispose();
                                    ho_ImageWithDefect = ExpTmpOutVar_0;
                                }
                                //在缺陷框右边标注编号
                                HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                    hv_Column24 + 35);
                                HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                                hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                            }
                            disp_message(hv_ExpDefaultWinHandle, "周期性缺陷，编号：" + hv_tempMessage,
                                "window", hv_messageShowRow * 30, 30, "red", "true");
                            hv_messageShowRow = hv_messageShowRow + 1;
                        }
                    }

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_ClothRegion, out ExpTmpOutVar_0, 60,
                            20);
                        ho_ClothRegion.Dispose();
                        ho_ClothRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_ClothRegion, out ExpTmpOutVar_0, 1, 10);
                        ho_ClothRegion.Dispose();
                        ho_ClothRegion = ExpTmpOutVar_0;
                    }
                    //标准色差的个数Length，检测框个数必须与标准色差个数相等
                    HOperatorSet.TupleLength(hv_standardTupleL, out hv_Length);

                    if ((int)(new HTuple(hv_result.TupleNotEqual(1))) != 0)
                    {
                        if ((int)(new HTuple(hv_Length.TupleNotEqual(hv_boxNumber))) != 0)
                        {
                            //检测框个数必须与标准色差个数一致
                            disp_message(hv_ExpDefaultWinHandle, "色差检测失败，检测框个数必须与标准色差个数不一致",
                                "window", 30, 30, "red", "true");
                            hv_messageShowRow = hv_messageShowRow + 1;
                        }
                        else
                        {
                            if ((int)(new HTuple(hv_Length.TupleEqual(0))) != 0)
                            {
                                //缺少标准色差
                                disp_message(hv_ExpDefaultWinHandle, "缺少标准色差", "window",
                                    30, 30, "red", "true");
                                hv_messageShowRow = hv_messageShowRow + 1;
                            }
                            else
                            {
                                //色差检测
                                //boxDistance表示两个框间距
                                hv_boxDistance = ((hv_Width - (hv_boxNumber * hv_boxWidth)) - (hv_boxBenginX * 2)) / (hv_boxNumber - 1);
                                //boxBenginY框起始y坐标
                                hv_boxBenginY = (hv_Height - hv_boxHeight) / 2;
                                hv_tupleDeviationL = new HTuple();
                                hv_tupleDeviationA = new HTuple();
                                hv_tupleDeviationB = new HTuple();
                                ho_Boxs.Dispose();
                                HOperatorSet.GenEmptyObj(out ho_Boxs);
                                HTuple end_val295 = hv_boxNumber - 1;
                                HTuple step_val295 = 1;
                                for (hv_i = 0; hv_i.Continue(end_val295, step_val295); hv_i = hv_i.TupleAdd(step_val295))
                                {
                                    ho_Rectangle.Dispose();
                                    HOperatorSet.GenRectangle1(out ho_Rectangle, hv_boxBenginY, hv_boxBenginX + (hv_i * (hv_boxWidth + hv_boxDistance)),
                                        hv_boxBenginY + hv_boxHeight, (hv_boxBenginX + (hv_i * (hv_boxWidth + hv_boxDistance))) + hv_boxWidth);
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.Union2(ho_Boxs, ho_Rectangle, out ExpTmpOutVar_0);
                                        ho_Boxs.Dispose();
                                        ho_Boxs = ExpTmpOutVar_0;
                                    }
                                    ho_ImageReduced.Dispose();
                                    HOperatorSet.ReduceDomain(ho_Image_COPY_INP_TMP, ho_Rectangle,
                                        out ho_ImageReduced);
                                    if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                        0))) != 0)
                                    {
                                        HOperatorSet.InitComputeDevice(hv_DeviceHandle, " median_image ");
                                        HOperatorSet.ActivateComputeDevice(hv_DeviceHandle);
                                    }
                                    ho_ImageMedian.Dispose();
                                    HOperatorSet.MedianImage(ho_ImageReduced, out ho_ImageMedian, "circle",
                                        hv_medianKernal * 0.5, "cyclic");
                                    if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                        0))) != 0)
                                    {
                                        HOperatorSet.DeactivateComputeDevice(hv_DeviceHandle);
                                    }
                                    ho_Region1.Dispose();
                                    HOperatorSet.VarThreshold(ho_ImageMedian, out ho_Region1, 25, 25,
                                        0.1, 1, "equal");
                                    ho_ImageMedianReduced.Dispose();
                                    HOperatorSet.ReduceDomain(ho_ImageMedian, ho_Region1, out ho_ImageMedianReduced
                                        );
                                    ho_ImageR.Dispose(); ho_ImageG.Dispose(); ho_ImageB.Dispose();
                                    HOperatorSet.Decompose3(ho_ImageMedianReduced, out ho_ImageR, out ho_ImageG,
                                        out ho_ImageB);
                                    if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                        0))) != 0)
                                    {
                                        HOperatorSet.InitComputeDevice(hv_DeviceHandle, "trans_from_rgb");
                                        HOperatorSet.ActivateComputeDevice(hv_DeviceHandle);
                                    }
                                    ho_ImageL.Dispose(); ho_ImageA.Dispose();
                                    {
                                        HObject ExpTmpOutVar_0;
                                        HOperatorSet.TransFromRgb(ho_ImageR, ho_ImageG, ho_ImageB, out ho_ImageL,
                                            out ho_ImageA, out ExpTmpOutVar_0, "cielab");
                                        ho_ImageB.Dispose();
                                        ho_ImageB = ExpTmpOutVar_0;
                                    }
                                    if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                        0))) != 0)
                                    {
                                        HOperatorSet.DeactivateComputeDevice(hv_DeviceHandle);
                                    }

                                    HOperatorSet.Intensity(ho_Rectangle, ho_ImageL, out hv_MeanL, out hv_DeviationL);
                                    HOperatorSet.Intensity(ho_Rectangle, ho_ImageA, out hv_MeanA, out hv_DeviationA);
                                    HOperatorSet.Intensity(ho_Rectangle, ho_ImageB, out hv_MeanB, out hv_DeviationB);
                                    if (hv_tupleL == null)
                                        hv_tupleL = new HTuple();
                                    hv_tupleL[hv_i] = hv_MeanL;
                                    if (hv_tupleA == null)
                                        hv_tupleA = new HTuple();
                                    hv_tupleA[hv_i] = hv_MeanA;
                                    if (hv_tupleB == null)
                                        hv_tupleB = new HTuple();
                                    hv_tupleB[hv_i] = hv_MeanB;
                                    if (hv_tupleDeviationL == null)
                                        hv_tupleDeviationL = new HTuple();
                                    hv_tupleDeviationL[hv_i] = hv_DeviationL;
                                    if (hv_tupleDeviationA == null)
                                        hv_tupleDeviationA = new HTuple();
                                    hv_tupleDeviationA[hv_i] = hv_DeviationA;
                                    if (hv_tupleDeviationB == null)
                                        hv_tupleDeviationB = new HTuple();
                                    hv_tupleDeviationB[hv_i] = hv_DeviationB;
                                }
                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                                HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                                HOperatorSet.DispObj(ho_Boxs, hv_ExpDefaultWinHandle);
                                hv_aberrations = new HTuple();
                                HTuple end_val333 = hv_boxNumber - 1;
                                HTuple step_val333 = 1;
                                for (hv_j = 0; hv_j.Continue(end_val333, step_val333); hv_j = hv_j.TupleAdd(step_val333))
                                {
                                    HOperatorSet.TupleSqrt(((((hv_tupleL.TupleSelect(hv_j)) - (hv_standardTupleL.TupleSelect(
                                        hv_j))) * ((hv_tupleL.TupleSelect(hv_j)) - (hv_standardTupleL.TupleSelect(
                                        hv_j)))) + (((hv_tupleA.TupleSelect(hv_j)) - (hv_standardTupleA.TupleSelect(
                                        hv_j))) * ((hv_tupleA.TupleSelect(hv_j)) - (hv_standardTupleA.TupleSelect(
                                        hv_j))))) + (((hv_tupleB.TupleSelect(hv_j)) - (hv_standardTupleB.TupleSelect(
                                        hv_j))) * ((hv_tupleB.TupleSelect(hv_j)) - (hv_standardTupleB.TupleSelect(
                                        hv_j)))), out hv_a);
                                    //c := (tupleL[j]-standardTupleL[j])*(tupleL[j]-standardTupleL[j])
                                    //d := (tupleA[j]-standardTupleA[j])*(tupleA[j]-standardTupleA[j])
                                    //e := (tupleB[j]-standardTupleB[j])*(tupleB[j]-standardTupleB[j])
                                    if (hv_aberrations == null)
                                        hv_aberrations = new HTuple();
                                    hv_aberrations[hv_j] = hv_a;
                                }
                                HOperatorSet.TupleSort(hv_aberrations, out hv_aberrations1);
                                HOperatorSet.TupleSort(hv_tupleL, out hv_tupleL1);
                                HOperatorSet.TupleSort(hv_tupleA, out hv_tupleA1);
                                HOperatorSet.TupleSort(hv_tupleB, out hv_tupleB1);
                                if ((int)(new HTuple(hv_boxNumber.TupleGreater(2))) != 0)
                                {
                                    hv_total = 0;
                                    hv_totalL = 0;
                                    hv_totalA = 0;
                                    hv_totalB = 0;
                                    HTuple end_val349 = hv_boxNumber - 2;
                                    HTuple step_val349 = 1;
                                    for (hv_k = 1; hv_k.Continue(end_val349, step_val349); hv_k = hv_k.TupleAdd(step_val349))
                                    {
                                        hv_total = hv_total + (hv_aberrations1.TupleSelect(hv_k));
                                        hv_totalL = hv_totalL + (hv_tupleL1.TupleSelect(hv_k));
                                        hv_totalA = hv_totalA + (hv_tupleA1.TupleSelect(hv_k));
                                        hv_totalB = hv_totalB + (hv_tupleB1.TupleSelect(hv_k));
                                    }
                                    hv_clothAberration = hv_total / (hv_boxNumber - 2);
                                    hv_L = hv_totalL / (hv_boxNumber - 2);
                                    hv_A = hv_totalA / (hv_boxNumber - 2);
                                    hv_B = hv_totalB / (hv_boxNumber - 2);
                                }
                                else
                                {
                                    hv_clothAberration = hv_aberrations.TupleSelect(0);
                                    hv_L = hv_tupleL1.TupleSelect(0);
                                    hv_A = hv_tupleA1.TupleSelect(0);
                                    hv_B = hv_tupleB1.TupleSelect(0);
                                }

                                //tuple_max (aberrations, clothAberration)
                                if ((int)(new HTuple(hv_clothAberration.TupleLess(hv_clothAberrationGrad1))) != 0)
                                {
                                    disp_message(hv_ExpDefaultWinHandle, ("色差值：" + hv_clothAberration) + "（色差等级：一级色差）",
                                        "window", 30, 30, "green", "true");
                                }
                                else
                                {
                                    if ((int)(new HTuple(hv_clothAberration.TupleLess(hv_clothAberrationGrad2))) != 0)
                                    {
                                        disp_message(hv_ExpDefaultWinHandle, ("色差值：" + hv_clothAberration) + "（色差等级：二级色差）",
                                            "window", 30, 30, "lime green", "true");
                                    }
                                    else
                                    {
                                        if ((int)(new HTuple(hv_clothAberration.TupleLess(hv_clothAberrationGrad3))) != 0)
                                        {
                                            disp_message(hv_ExpDefaultWinHandle, ("色差值：" + hv_clothAberration) + "（色差等级：三级色差）",
                                                "window", 30, 30, "orange", "true");
                                        }
                                        else
                                        {
                                            if ((int)(new HTuple(hv_clothAberration.TupleLess(hv_clothAberrationGrad4))) != 0)
                                            {
                                                disp_message(hv_ExpDefaultWinHandle, ("色差值：" + hv_clothAberration) + "（色差等级：四级色差）",
                                                    "window", 30, 30, "magenta", "true");
                                            }
                                            else
                                            {
                                                disp_message(hv_ExpDefaultWinHandle, ("色差值：" + hv_clothAberration) + "（色差等级：五级色差）",
                                                    "window", 30, 30, "red", "true");

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }


                    //***********************************************************************************
                    //检测布匹两边的斜率，判断其是否卷边，如卷边，则不铺宽度不求取
                    //***********************************************************************************
                    HOperatorSet.SmallestRectangle1(ho_ClothRegion, out hv_Row1, out hv_Column1,
                        out hv_Row2, out hv_Column2);
                    ho_Contours.Dispose();
                    HOperatorSet.GenContourRegionXld(ho_ClothRegion, out ho_Contours, "border");
                    ho_ContoursSplit.Dispose();
                    HOperatorSet.SegmentContoursXld(ho_Contours, out ho_ContoursSplit, "lines_circles",
                        40, 20, 1);
                    ho_UnionContours.Dispose();
                    HOperatorSet.UnionCollinearContoursXld(ho_ContoursSplit, out ho_UnionContours,
                        20, 10, 10, 0.2, "attr_keep");
                    ho_SelectedContours1.Dispose();
                    HOperatorSet.SelectContoursXld(ho_UnionContours, out ho_SelectedContours1,
                        "direction", 1.17, 1.57 - hv_edgeRollSlope, -0.5, 0.5);
                    ho_SelectedContours2.Dispose();
                    HOperatorSet.SelectContoursXld(ho_UnionContours, out ho_SelectedContours2,
                        "direction", 1.57 + hv_edgeRollSlope, 1.97, -0.5, 0.5);
                    ho_ObjectsConcat.Dispose();
                    HOperatorSet.ConcatObj(ho_SelectedContours1, ho_SelectedContours2, out ho_ObjectsConcat
                        );
                    ho_SelectedContours.Dispose();
                    HOperatorSet.SelectContoursXld(ho_ObjectsConcat, out ho_SelectedContours,
                        "contour_length", 100, 20000, -0.5, 0.5);
                    HOperatorSet.CountObj(ho_SelectedContours, out hv_Number1);
                    //**********************************************************************************
                    if ((int)(new HTuple(hv_Number1.TupleGreater(0))) != 0)
                    {
                        //卷边或者布匹偏移
                        //卷边或者布匹偏移++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[1] = 1;
                        hv_result = 4;
                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        HTuple end_val409 = hv_Number2;
                        HTuple step_val409 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val409, step_val409); hv_i = hv_i.TupleAdd(step_val409))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected1.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedContours, out ho_ObjectSelected1,
                                hv_i);
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.GenRegionContourXld(ho_ObjectSelected1, out ho_ObjectSelected,
                                "filled");
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            disp_message(hv_ExpDefaultWinHandle, hv_defectLoactionNumber, "window",
                                (hv_Row14 + hv_Row24) / 2, hv_Column24 + 35, "magenta", "false");
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                        }
                        disp_message(hv_ExpDefaultWinHandle, "卷边缺陷，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                    }
                    else
                    {
                        //通过布匹区域的面积以及高度，算出平均宽度
                        HOperatorSet.AreaCenter(ho_ClothRegion, out hv_Area3, out hv_Row3, out hv_Column3);
                        hv_meanWidth = hv_Area3 / (hv_Row2 - hv_Row1);
                        hv_minWidth = 0;
                        hv_maxWidth = 0;
                        //***********************************************************************************
                        //将布匹分成10份，并求取最小宽度，最大宽度，平均宽度
                        //***********************************************************************************
                        for (hv_in = 0; (int)hv_in <= 19; hv_in = (int)hv_in + 4)
                        {
                            ho_Rectangle1.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle1, (hv_in * (hv_Row2 - hv_Row1)) / 20,
                                1, ((hv_in + 1) * (hv_Row2 - hv_Row1)) / 20, hv_Width);
                            ho_RegionIntersection1.Dispose();
                            HOperatorSet.Intersection(ho_Rectangle1, ho_ClothRegion, out ho_RegionIntersection1
                                );
                            HOperatorSet.SmallestRectangle1(ho_RegionIntersection1, out hv_Row13,
                                out hv_Column13, out hv_Row23, out hv_Column23);
                            if ((int)(new HTuple(hv_minWidth.TupleEqual(0))) != 0)
                            {
                                hv_minWidth = hv_Column23 - hv_Column13;
                                hv_maxWidth = hv_Column23 - hv_Column13;
                            }
                            else
                            {
                                if ((int)(new HTuple(((hv_Column23 - hv_Column13)).TupleGreater(hv_maxWidth))) != 0)
                                {
                                    hv_maxWidth = hv_Column23 - hv_Column13;
                                }
                                if ((int)(new HTuple(((hv_Column23 - hv_Column13)).TupleLess(hv_minWidth))) != 0)
                                {
                                    hv_minWidth = hv_Column23 - hv_Column13;
                                }
                            }

                        }
                        //***********************************************************************************
                        //如果平均宽度不在最小宽度与最大宽度之间，则将平均宽度置为0.5*(minWidth+maxWidth)
                        if ((int)((new HTuple(hv_meanWidth.TupleLess(hv_minWidth))).TupleOr(new HTuple(hv_meanWidth.TupleGreater(
                            hv_maxWidth)))) != 0)
                        {
                            hv_meanWidth = 0.5 * (hv_minWidth + hv_maxWidth);
                        }
                    }
                    HOperatorSet.TupleFloor(hv_minWidth / hv_magnification, out hv_minWidth);
                    disp_message(hv_ExpDefaultWinHandle, ("布匹最小宽度：" + hv_minWidth) + "mm",
                        "window", 60, 30, "green", "true");
                    HOperatorSet.TupleFloor(hv_maxWidth / hv_magnification, out hv_maxWidth);
                    disp_message(hv_ExpDefaultWinHandle, ("布匹最大宽度：" + hv_maxWidth) + "mm",
                        "window", 90, 30, "green", "true");
                    HOperatorSet.TupleFloor(hv_meanWidth / hv_magnification, out hv_meanWidth);
                    disp_message(hv_ExpDefaultWinHandle, ("布匹平均宽度：" + hv_meanWidth) + "mm",
                        "window", 120, 30, "green", "true");

                    //***********************************************************************************
                    //计算是否缺边
                    //***********************************************************************************
                    ho_RegionTrans.Dispose();
                    HOperatorSet.ShapeTrans(ho_ClothRegion, out ho_RegionTrans, "rectangle1");
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_RegionTrans, ho_ClothRegion, out ho_RegionDifference
                        );
                    ho_RegionOpening.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ho_RegionOpening,
                        hv_imperfectBorderWidth * 2, 2);
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
                    ho_SelectedRegions2.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions2,
                        (new HTuple("row")).TupleConcat("height"), "and", ((hv_Row1 + 10)).TupleConcat(
                        hv_imperfectBorderWidth), ((hv_Row2 - 10)).TupleConcat(20000));
                    HOperatorSet.CountObj(ho_SelectedRegions2, out hv_Number3);
                    if ((int)(new HTuple(hv_Number3.TupleGreater(0))) != 0)
                    {
                        //缺边缺陷
                        //缺边缺陷++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[2] = (hv_tupleDetectResult.TupleSelect(2)) + hv_Number3;
                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        hv_defectNumber = hv_defectNumber + hv_Number3;
                        HOperatorSet.SmallestCircle(ho_SelectedRegions2, out hv_Row, out hv_Column,
                            out hv_Radius);
                        HOperatorSet.TupleConcat(hv_tupleDefectRadius, hv_Radius, out hv_tupleDefectRadius);
                        HOperatorSet.TupleConcat(hv_tupleDefectX, hv_Column, out hv_tupleDefectX);
                        HOperatorSet.TupleConcat(hv_tupleDefectY, hv_Row, out hv_tupleDefectY);
                        HTuple end_val487 = hv_Number3;
                        HTuple step_val487 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val487, step_val487); hv_i = hv_i.TupleAdd(step_val487))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions2, out ho_ObjectSelected,
                                hv_i);
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                hv_Column24 + 35);
                            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                        }
                        disp_message(hv_ExpDefaultWinHandle, "缺边缺陷，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                    }
                    if ((int)(new HTuple(hv_result.TupleEqual(0))) != 0)
                    {
                        //瑕疵检测
                        ho_ValidClothRegionGrayImage.Dispose();
                        HOperatorSet.ReduceDomain(ho_GrayImage, ho_ClothRegion, out ho_ValidClothRegionGrayImage
                            );
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.MedianImage(ho_ValidClothRegionGrayImage, out ExpTmpOutVar_0,
                                "circle", 2, "mirrored");
                            ho_ValidClothRegionGrayImage.Dispose();
                            ho_ValidClothRegionGrayImage = ExpTmpOutVar_0;
                        }
                        ho_ImageMean1.Dispose();
                        HOperatorSet.MeanImage(ho_ValidClothRegionGrayImage, out ho_ImageMean1,
                            10, 10);
                        ho_ImageMean2.Dispose();
                        HOperatorSet.MeanImage(ho_ValidClothRegionGrayImage, out ho_ImageMean2,
                            50, 50);
                        ho_RegionDynThresh.Dispose();
                        HOperatorSet.DynThreshold(ho_ImageMean1, ho_ImageMean2, out ho_RegionDynThresh,
                            hv_dynThresh, "dark");

                        ho_ImageMean.Dispose();
                        HOperatorSet.RegionToMean(ho_ClothRegion, ho_GrayImage, out ho_ImageMean
                            );
                        ho_ImageSub.Dispose();
                        HOperatorSet.SubImage(ho_ValidClothRegionGrayImage, ho_ImageMean, out ho_ImageSub,
                            1, 128);
                        ho_LightRegion.Dispose();
                        HOperatorSet.Threshold(ho_ImageSub, out ho_LightRegion, 128 + hv_thresh,
                            255);
                        ho_LowGrayRegion.Dispose();
                        HOperatorSet.Threshold(ho_ImageSub, out ho_LowGrayRegion, 0, 128 - hv_thresh);

                        //intensity (ClothRegion, GrayImage, ValidClothRegionGrayImageMean, Deviation)
                        //tuple_max2 (20, ValidClothRegionGrayImageMean-50, Max2)
                        //tuple_min2 (235, ValidClothRegionGrayImageMean+50, Min2)
                        //threshold (ValidClothRegionGrayImage, LowGrayRegion, 0, Max2)
                        //threshold (ValidClothRegionGrayImage, LightRegion, Min2, 255)
                        ho_RegionUnion4.Dispose();
                        HOperatorSet.Union2(ho_LightRegion, ho_LowGrayRegion, out ho_RegionUnion4
                            );
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_RegionDynThresh, ho_RegionUnion4, out ExpTmpOutVar_0
                                );
                            ho_RegionUnion4.Dispose();
                            ho_RegionUnion4 = ExpTmpOutVar_0;
                        }
                        ho_RegionErosion.Dispose();
                        HOperatorSet.ErosionRectangle1(ho_ClothRegion, out ho_RegionErosion,
                            hv_clothSideUnDetectWidth * 2, 1);
                        ho_RegionIntersection.Dispose();
                        HOperatorSet.Intersection(ho_RegionErosion, ho_RegionUnion4, out ho_RegionIntersection
                            );
                        ho_ConnectedRegions3.Dispose();
                        HOperatorSet.Connection(ho_RegionIntersection, out ho_ConnectedRegions3
                            );
                        ho_SelectedRegions3.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_SelectedRegions3,
                            "height", "and", hv_Height - 100, hv_Height);
                        HOperatorSet.CountObj(ho_SelectedRegions3, out hv_Number2);
                        //周期性缺陷++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[0] = (hv_tupleDetectResult.TupleSelect(0)) + hv_Number2;
                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        HTuple end_val536 = hv_Number2;
                        HTuple step_val536 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val536, step_val536); hv_i = hv_i.TupleAdd(step_val536))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions3, out ho_ObjectSelected,
                                hv_i);
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                hv_Column24 + 35);
                            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;

                        }
                        disp_message(hv_ExpDefaultWinHandle, "周期性缺陷，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                        ho_SelectedRegions4.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_SelectedRegions4,
                            "height", "and", 10, hv_Height - 100);
                        ho_SelectedRegions5.Dispose();
                        HOperatorSet.SelectShape(ho_SelectedRegions4, out ho_SelectedRegions5,
                            ((new HTuple("area")).TupleConcat("rb")).TupleConcat("ra"), "or",
                            ((hv_defectArea.TupleConcat(hv_defectWidth / 2))).TupleConcat(hv_defectHeight / 2),
                            ((new HTuple(500000)).TupleConcat(200000)).TupleConcat(200000));
                        HOperatorSet.CountObj(ho_SelectedRegions5, out hv_Number2);
                        hv_defectNumber = hv_defectNumber + hv_Number2;
                        //将检测结果输出
                        HOperatorSet.SmallestCircle(ho_SelectedRegions5, out hv_Row, out hv_Column,
                            out hv_Radius);
                        HOperatorSet.TupleConcat(hv_tupleDefectRadius, hv_Radius, out hv_tupleDefectRadius);
                        HOperatorSet.TupleConcat(hv_tupleDefectX, hv_Column, out hv_tupleDefectX);
                        HOperatorSet.TupleConcat(hv_tupleDefectY, hv_Row, out hv_tupleDefectY);

                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        //瑕疵点缺陷++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[3] = (hv_tupleDetectResult.TupleSelect(3)) + hv_Number2;
                        HTuple end_val570 = hv_Number2;
                        HTuple step_val570 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val570, step_val570); hv_i = hv_i.TupleAdd(step_val570))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions5, out ho_ObjectSelected,
                                hv_i);
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                hv_Column24 + 35);
                            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                        }
                        disp_message(hv_ExpDefaultWinHandle, "瑕疵点，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                    }

                }
            }

            ho_Image_COPY_INP_TMP.Dispose();
            ho_DefectRegion.Dispose();
            ho_GrayImage.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageR0.Dispose();
            ho_ImageG0.Dispose();
            ho_ImageB0.Dispose();
            ho_ImageL.Dispose();
            ho_ImageA.Dispose();
            ho_ImageB.Dispose();
            ho_MidRectangle.Dispose();
            ho_LeftRectangle.Dispose();
            ho_RightRectangle.Dispose();
            ho_Regions1.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_Rectangle1.Dispose();
            ho_Rectangle2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionUnion2.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_ClothRegion.Dispose();
            ho_SortedRegions.Dispose();
            ho_ObjectSelected1.Dispose();
            ho_ObjectSelected2.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Rectangle3.Dispose();
            ho_Rectangle31.Dispose();
            ho_RegionDifference1.Dispose();
            ho_Boxs.Dispose();
            ho_ImageReduced.Dispose();
            ho_ImageMedian.Dispose();
            ho_Region1.Dispose();
            ho_ImageMedianReduced.Dispose();
            ho_ImageR.Dispose();
            ho_ImageG.Dispose();
            ho_Contours.Dispose();
            ho_ContoursSplit.Dispose();
            ho_UnionContours.Dispose();
            ho_SelectedContours1.Dispose();
            ho_SelectedContours2.Dispose();
            ho_ObjectsConcat.Dispose();
            ho_SelectedContours.Dispose();
            ho_RegionIntersection1.Dispose();
            ho_RegionTrans.Dispose();
            ho_RegionDifference.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_ValidClothRegionGrayImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageMean2.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ImageMean.Dispose();
            ho_ImageSub.Dispose();
            ho_LightRegion.Dispose();
            ho_LowGrayRegion.Dispose();
            ho_RegionUnion4.Dispose();
            ho_RegionErosion.Dispose();
            ho_RegionIntersection.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_SelectedRegions3.Dispose();
            ho_SelectedRegions4.Dispose();
            ho_SelectedRegions5.Dispose();

            return;
        }
        catch (HalconException HDevExpDefaultException)
        {
            ho_Image_COPY_INP_TMP.Dispose();
            ho_DefectRegion.Dispose();
            ho_GrayImage.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageR0.Dispose();
            ho_ImageG0.Dispose();
            ho_ImageB0.Dispose();
            ho_ImageL.Dispose();
            ho_ImageA.Dispose();
            ho_ImageB.Dispose();
            ho_MidRectangle.Dispose();
            ho_LeftRectangle.Dispose();
            ho_RightRectangle.Dispose();
            ho_Regions1.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_Rectangle1.Dispose();
            ho_Rectangle2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionUnion2.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_ClothRegion.Dispose();
            ho_SortedRegions.Dispose();
            ho_ObjectSelected1.Dispose();
            ho_ObjectSelected2.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Rectangle3.Dispose();
            ho_Rectangle31.Dispose();
            ho_RegionDifference1.Dispose();
            ho_Boxs.Dispose();
            ho_ImageReduced.Dispose();
            ho_ImageMedian.Dispose();
            ho_Region1.Dispose();
            ho_ImageMedianReduced.Dispose();
            ho_ImageR.Dispose();
            ho_ImageG.Dispose();
            ho_Contours.Dispose();
            ho_ContoursSplit.Dispose();
            ho_UnionContours.Dispose();
            ho_SelectedContours1.Dispose();
            ho_SelectedContours2.Dispose();
            ho_ObjectsConcat.Dispose();
            ho_SelectedContours.Dispose();
            ho_RegionIntersection1.Dispose();
            ho_RegionTrans.Dispose();
            ho_RegionDifference.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_ValidClothRegionGrayImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageMean2.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ImageMean.Dispose();
            ho_ImageSub.Dispose();
            ho_LightRegion.Dispose();
            ho_LowGrayRegion.Dispose();
            ho_RegionUnion4.Dispose();
            ho_RegionErosion.Dispose();
            ho_RegionIntersection.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_SelectedRegions3.Dispose();
            ho_SelectedRegions4.Dispose();
            ho_SelectedRegions5.Dispose();

            throw HDevExpDefaultException;
        }
    }

    public void get_standard_lab(HObject ho_Image, out HObject ho_ImageWithDefect,
        out HTuple hv_standardTupleL, out HTuple hv_standardTupleA, out HTuple hv_standardTupleB,
        out HTuple hv_standardL, out HTuple hv_standardA, out HTuple hv_standardB, out HTuple hv_tupleDetectResult,
        out HTuple hv_tupleDefectRadius, out HTuple hv_tupleDefectX, out HTuple hv_tupleDefectY,
        out HTuple hv_minWidth, out HTuple hv_maxWidth, out HTuple hv_meanWidth, out HTuple hv_defectNumber)
    {


        // Stack for temporary objects 
        HObject[] OTemp = new HObject[20];

        // Local iconic variables 

        HObject ho_DefectRegion, ho_GrayImage, ho_Rectangle;
        HObject ho_ImageR0 = null, ho_ImageG0 = null, ho_ImageB0 = null;
        HObject ho_ImageL = null, ho_ImageA = null, ho_ImageB = null;
        HObject ho_MidRectangle = null, ho_LeftRectangle = null, ho_RightRectangle = null;
        HObject ho_Regions1 = null, ho_ConnectedRegions4 = null, ho_Rectangle1 = null;
        HObject ho_Rectangle2 = null, ho_RegionUnion1 = null, ho_RegionUnion2 = null;
        HObject ho_RegionOpening1 = null, ho_ConnectedRegions1 = null;
        HObject ho_SelectedRegions1 = null, ho_ClothRegion = null, ho_SortedRegions = null;
        HObject ho_ObjectSelected1 = null, ho_ObjectSelected2 = null;
        HObject ho_ConnectedRegions2 = null, ho_ObjectSelected = null;
        HObject ho_Rectangle3 = null, ho_Rectangle31 = null, ho_RegionDifference1 = null;
        HObject ho_Boxs = null, ho_BoxImage = null, ho_BoxImagedMedian = null;
        HObject ho_Region1 = null, ho_BoxImagedMedianValid = null, ho_BoxImageR0 = null;
        HObject ho_BoxImageG0 = null, ho_BoxImageB0 = null, ho_BoxImageL = null;
        HObject ho_BoxImageA = null, ho_BoxImageB = null, ho_Contours = null;
        HObject ho_ContoursSplit = null, ho_UnionContours = null, ho_SelectedContours1 = null;
        HObject ho_SelectedContours2 = null, ho_ObjectsConcat = null;
        HObject ho_SelectedContours = null, ho_RegionIntersection1 = null;
        HObject ho_RegionTrans = null, ho_RegionDifference = null, ho_RegionOpening = null;
        HObject ho_ConnectedRegions = null, ho_SelectedRegions2 = null;
        HObject ho_ValidClothRegionGrayImage = null, ho_ImageMean1 = null;
        HObject ho_ImageMean2 = null, ho_RegionDynThresh = null, ho_ImageMean = null;
        HObject ho_ImageSub = null, ho_LightRegion = null, ho_LowGrayRegion = null;
        HObject ho_RegionUnion4 = null, ho_RegionErosion = null, ho_RegionIntersection = null;
        HObject ho_ConnectedRegions3 = null, ho_SelectedRegions3 = null;
        HObject ho_SelectedRegions4 = null, ho_SelectedRegions5 = null;

        // Local copy input parameter variables 
        HObject ho_Image_COPY_INP_TMP;
        ho_Image_COPY_INP_TMP = ho_Image.CopyObj(1, -1);



        // Local control variables 

        HTuple hv_windowHandle = new HTuple(), hv_magnification = null;
        HTuple hv_leftSide = null, hv_rightSide = null, hv_boxNumber = null;
        HTuple hv_boxWidth = null, hv_boxHeight = null, hv_boxBenginX = null;
        HTuple hv_dynThresh = null, hv_medianKernal = null, hv_thresh = null;
        HTuple hv_defectArea = null, hv_defectWidth = null, hv_defectHeight = null;
        HTuple hv_edgeRollSlope = null, hv_imperfectBorderWidth = null;
        HTuple hv_clothAberrationGrad1 = null, hv_clothAberrationGrad2 = null;
        HTuple hv_clothAberrationGrad3 = null, hv_clothAberrationGrad4 = null;
        HTuple hv_clothSideUnDetectWidth = null, hv_Result = null;
        HTuple hv_messageShowRow = null, hv_defectLoactionNumber = null;
        HTuple hv_L = null, hv_A = null, hv_B = null, hv_clothAberration = null;
        HTuple hv_Width = null, hv_Height = null, hv_Mean = null;
        HTuple hv_Deviation = null, hv_message = new HTuple();
        HTuple hv_DeviceIdentifier = null, hv_hasTransFormRGB = null;
        HTuple hv_DeviceHandle = new HTuple(), hv_Mean11 = new HTuple();
        HTuple hv_Deviation11 = new HTuple(), hv_Mean12 = new HTuple();
        HTuple hv_Deviation12 = new HTuple(), hv_Mean13 = new HTuple();
        HTuple hv_Deviation13 = new HTuple(), hv_Max1 = new HTuple();
        HTuple hv_Mean21 = new HTuple(), hv_Mean22 = new HTuple();
        HTuple hv_Mean23 = new HTuple(), hv_Max2 = new HTuple();
        HTuple hv_Mean31 = new HTuple(), hv_Mean32 = new HTuple();
        HTuple hv_Mean33 = new HTuple(), hv_Max3 = new HTuple();
        HTuple hv_Number = new HTuple(), hv_AbsoluteHisto = new HTuple();
        HTuple hv_RelativeHisto = new HTuple(), hv_MinThresh = new HTuple();
        HTuple hv_MaxThresh = new HTuple(), hv_Row11 = new HTuple();
        HTuple hv_Column11 = new HTuple(), hv_Row21 = new HTuple();
        HTuple hv_Column21 = new HTuple(), hv_Row12 = new HTuple();
        HTuple hv_Column12 = new HTuple(), hv_Row22 = new HTuple();
        HTuple hv_Column22 = new HTuple(), hv_Convexity1 = new HTuple();
        HTuple hv_Convexity2 = new HTuple(), hv_Number2 = new HTuple();
        HTuple hv_tempMessage = new HTuple(), hv_i = new HTuple();
        HTuple hv_Row14 = new HTuple(), hv_Column14 = new HTuple();
        HTuple hv_Row24 = new HTuple(), hv_Column24 = new HTuple();
        HTuple hv_boxDistance = new HTuple(), hv_boxBenginY = new HTuple();
        HTuple hv_tupleDeviationL = new HTuple(), hv_tupleDeviationA = new HTuple();
        HTuple hv_tupleDeviationB = new HTuple(), hv_MeanL = new HTuple();
        HTuple hv_DeviationL = new HTuple(), hv_MeanA = new HTuple();
        HTuple hv_DeviationA = new HTuple(), hv_MeanB = new HTuple();
        HTuple hv_DeviationB = new HTuple(), hv_standardTupleL1 = new HTuple();
        HTuple hv_standardTupleA1 = new HTuple(), hv_standardTupleB1 = new HTuple();
        HTuple hv_totalL = new HTuple(), hv_totalA = new HTuple();
        HTuple hv_totalB = new HTuple(), hv_k = new HTuple(), hv_Row1 = new HTuple();
        HTuple hv_Column1 = new HTuple(), hv_Row2 = new HTuple();
        HTuple hv_Column2 = new HTuple(), hv_Number1 = new HTuple();
        HTuple hv_Area3 = new HTuple(), hv_Row3 = new HTuple();
        HTuple hv_Column3 = new HTuple(), hv_in = new HTuple();
        HTuple hv_Row13 = new HTuple(), hv_Column13 = new HTuple();
        HTuple hv_Row23 = new HTuple(), hv_Column23 = new HTuple();
        HTuple hv_Number3 = new HTuple(), hv_Row = new HTuple();
        HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_ImageWithDefect);
        HOperatorSet.GenEmptyObj(out ho_DefectRegion);
        HOperatorSet.GenEmptyObj(out ho_GrayImage);
        HOperatorSet.GenEmptyObj(out ho_Rectangle);
        HOperatorSet.GenEmptyObj(out ho_ImageR0);
        HOperatorSet.GenEmptyObj(out ho_ImageG0);
        HOperatorSet.GenEmptyObj(out ho_ImageB0);
        HOperatorSet.GenEmptyObj(out ho_ImageL);
        HOperatorSet.GenEmptyObj(out ho_ImageA);
        HOperatorSet.GenEmptyObj(out ho_ImageB);
        HOperatorSet.GenEmptyObj(out ho_MidRectangle);
        HOperatorSet.GenEmptyObj(out ho_LeftRectangle);
        HOperatorSet.GenEmptyObj(out ho_RightRectangle);
        HOperatorSet.GenEmptyObj(out ho_Regions1);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions4);
        HOperatorSet.GenEmptyObj(out ho_Rectangle1);
        HOperatorSet.GenEmptyObj(out ho_Rectangle2);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion1);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion2);
        HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_ClothRegion);
        HOperatorSet.GenEmptyObj(out ho_SortedRegions);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected2);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
        HOperatorSet.GenEmptyObj(out ho_Rectangle3);
        HOperatorSet.GenEmptyObj(out ho_Rectangle31);
        HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
        HOperatorSet.GenEmptyObj(out ho_Boxs);
        HOperatorSet.GenEmptyObj(out ho_BoxImage);
        HOperatorSet.GenEmptyObj(out ho_BoxImagedMedian);
        HOperatorSet.GenEmptyObj(out ho_Region1);
        HOperatorSet.GenEmptyObj(out ho_BoxImagedMedianValid);
        HOperatorSet.GenEmptyObj(out ho_BoxImageR0);
        HOperatorSet.GenEmptyObj(out ho_BoxImageG0);
        HOperatorSet.GenEmptyObj(out ho_BoxImageB0);
        HOperatorSet.GenEmptyObj(out ho_BoxImageL);
        HOperatorSet.GenEmptyObj(out ho_BoxImageA);
        HOperatorSet.GenEmptyObj(out ho_BoxImageB);
        HOperatorSet.GenEmptyObj(out ho_Contours);
        HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
        HOperatorSet.GenEmptyObj(out ho_UnionContours);
        HOperatorSet.GenEmptyObj(out ho_SelectedContours1);
        HOperatorSet.GenEmptyObj(out ho_SelectedContours2);
        HOperatorSet.GenEmptyObj(out ho_ObjectsConcat);
        HOperatorSet.GenEmptyObj(out ho_SelectedContours);
        HOperatorSet.GenEmptyObj(out ho_RegionIntersection1);
        HOperatorSet.GenEmptyObj(out ho_RegionTrans);
        HOperatorSet.GenEmptyObj(out ho_RegionDifference);
        HOperatorSet.GenEmptyObj(out ho_RegionOpening);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_ValidClothRegionGrayImage);
        HOperatorSet.GenEmptyObj(out ho_ImageMean1);
        HOperatorSet.GenEmptyObj(out ho_ImageMean2);
        HOperatorSet.GenEmptyObj(out ho_RegionDynThresh);
        HOperatorSet.GenEmptyObj(out ho_ImageMean);
        HOperatorSet.GenEmptyObj(out ho_ImageSub);
        HOperatorSet.GenEmptyObj(out ho_LightRegion);
        HOperatorSet.GenEmptyObj(out ho_LowGrayRegion);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion4);
        HOperatorSet.GenEmptyObj(out ho_RegionErosion);
        HOperatorSet.GenEmptyObj(out ho_RegionIntersection);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions3);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions4);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions5);
        hv_standardTupleL = new HTuple();
        hv_standardTupleA = new HTuple();
        hv_standardTupleB = new HTuple();
        hv_standardL = new HTuple();
        hv_standardA = new HTuple();
        hv_standardB = new HTuple();
        hv_minWidth = new HTuple();
        hv_maxWidth = new HTuple();
        hv_meanWidth = new HTuple();
        try
        {
            //*********************输入参数
            //magnification放大率piexels/mm
            //LeftSide左边有效参数
            //RightSide右边有效参数
            //boxNumber框个数
            //boxWidth框宽度
            //boxHeight框高度
            //boxBenginX框起始X坐标
            //dynThresh缺陷阈值
            //medianKernal滤波卷积核大小
            //defectArea缺陷面积
            //edgeRollSlope判断卷边的斜率偏差
            //imperfectBorderWidth判断缺边的宽度
            //leftSide左边有效区域
            //rightSide右边有效区域
            //clothAberrationGrad1-clothAberrationGrad4色差等级分类
            //布匹边缘不检测宽度clothSideUnDetectWidth
            //*****************************
            hv_windowHandle = 200001;
            hv_magnification = 4.8188;
            hv_leftSide = 41.5040;
            hv_rightSide = 41.5040;
            hv_boxNumber = 6;
            hv_boxWidth = 83;
            hv_boxHeight = 83;
            hv_boxBenginX = 200;
            hv_dynThresh = 15;
            hv_medianKernal = 20;
            hv_thresh = 30;
            hv_defectArea = 0.2157;
            hv_defectWidth = 1.0393;
            hv_defectHeight = 1.0393;
            hv_edgeRollSlope = 0.1;
            hv_imperfectBorderWidth = 4.15;
            hv_clothAberrationGrad1 = 0.5;
            hv_clothAberrationGrad2 = 1.5;
            hv_clothAberrationGrad3 = 3.0;
            hv_clothAberrationGrad4 = 6.0;
            hv_clothSideUnDetectWidth = 20.7;

            hv_leftSide = hv_leftSide * hv_magnification;
            hv_rightSide = hv_rightSide * hv_magnification;
            hv_boxWidth = hv_boxWidth * hv_magnification;
            hv_boxHeight = hv_boxHeight * hv_magnification;
            hv_boxBenginX = hv_boxBenginX * hv_magnification;
            hv_defectArea = (hv_defectArea * hv_magnification) * hv_magnification;
            hv_defectWidth = hv_defectWidth * hv_magnification;
            hv_defectHeight = hv_defectHeight * hv_magnification;
            hv_imperfectBorderWidth = hv_imperfectBorderWidth * hv_magnification;
            hv_clothSideUnDetectWidth = hv_clothSideUnDetectWidth * hv_magnification;
            set_display_font(hv_ExpDefaultWinHandle, 16, "mono", "true", "false");
            hv_Result = 0;
            //***********************************
            //tupleDetectResult表示各个缺陷的个数,>0为有缺陷
            //tupleDetectResult[0]表示周期性缺陷个数，严重，亮红灯
            //tupleDetectResult[1]表示卷边，严重，亮红灯
            //tupleDetectResult[2]表示缺边个数，黄灯
            //tupleDetectResult[3]表示点瑕疵个数，黄灯
            //***********************************
            hv_tupleDetectResult = new HTuple();
            hv_tupleDetectResult[0] = 0;
            hv_tupleDetectResult[1] = 0;
            hv_tupleDetectResult[2] = 0;
            hv_tupleDetectResult[3] = 0;
            hv_tupleDetectResult[4] = 0;
            hv_tupleDetectResult[5] = 0;
            hv_tupleDetectResult[6] = 0;
            hv_tupleDetectResult[7] = 0;
            hv_tupleDetectResult[8] = 0;
            hv_tupleDetectResult[9] = 0;
            //瑕疵半径
            hv_tupleDefectRadius = new HTuple();
            //瑕疵X坐标
            hv_tupleDefectX = new HTuple();
            //瑕疵Y坐标
            hv_tupleDefectY = new HTuple();

            HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 3);
            //显示消息逐行增加
            hv_messageShowRow = 5;
            //检测缺陷的个数
            hv_defectNumber = 0;
            //defectLoactionNumber缺陷位置编号
            hv_defectLoactionNumber = 1;
            hv_L = 0;
            hv_A = 0;
            hv_B = 0;
            hv_clothAberration = 0;
            ho_DefectRegion.Dispose();
            HOperatorSet.GenEmptyObj(out ho_DefectRegion);
            HOperatorSet.GetImageSize(ho_Image_COPY_INP_TMP, out hv_Width, out hv_Height);
            //裁减无效区域
            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.CropPart(ho_Image_COPY_INP_TMP, out ExpTmpOutVar_0, 0, hv_leftSide,
                    (hv_Width - hv_leftSide) - hv_rightSide, hv_Height);
                ho_Image_COPY_INP_TMP.Dispose();
                ho_Image_COPY_INP_TMP = ExpTmpOutVar_0;
            }
            set_display_font(hv_ExpDefaultWinHandle, 20, "mono", "true", "false");
            HOperatorSet.DispObj(ho_Image_COPY_INP_TMP, hv_ExpDefaultWinHandle);
            HOperatorSet.GetImageSize(ho_Image_COPY_INP_TMP, out hv_Width, out hv_Height);
            ho_GrayImage.Dispose();
            HOperatorSet.Rgb1ToGray(ho_Image_COPY_INP_TMP, out ho_GrayImage);
            ho_ImageWithDefect.Dispose();
            HOperatorSet.CopyImage(ho_Image_COPY_INP_TMP, out ho_ImageWithDefect);

            //***********************************获取底部图像，计算灰度值判断图像是否过暗或者过亮
            ho_Rectangle.Dispose();
            HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Height - 1000, 1000, hv_Height,
                hv_Width - 1000);
            HOperatorSet.Intensity(ho_Rectangle, ho_GrayImage, out hv_Mean, out hv_Deviation);
            if ((int)(new HTuple(hv_Mean.TupleGreater(230))) != 0)
            {
                hv_Result = 10;
                hv_message = "标准色差获取失败，图片过亮";
                disp_message(hv_ExpDefaultWinHandle, hv_message, "window", hv_messageShowRow * 30,
                    30, "green", "true");
                hv_messageShowRow = hv_messageShowRow + 1;
                ho_Image_COPY_INP_TMP.Dispose();
                ho_DefectRegion.Dispose();
                ho_GrayImage.Dispose();
                ho_Rectangle.Dispose();
                ho_ImageR0.Dispose();
                ho_ImageG0.Dispose();
                ho_ImageB0.Dispose();
                ho_ImageL.Dispose();
                ho_ImageA.Dispose();
                ho_ImageB.Dispose();
                ho_MidRectangle.Dispose();
                ho_LeftRectangle.Dispose();
                ho_RightRectangle.Dispose();
                ho_Regions1.Dispose();
                ho_ConnectedRegions4.Dispose();
                ho_Rectangle1.Dispose();
                ho_Rectangle2.Dispose();
                ho_RegionUnion1.Dispose();
                ho_RegionUnion2.Dispose();
                ho_RegionOpening1.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_ClothRegion.Dispose();
                ho_SortedRegions.Dispose();
                ho_ObjectSelected1.Dispose();
                ho_ObjectSelected2.Dispose();
                ho_ConnectedRegions2.Dispose();
                ho_ObjectSelected.Dispose();
                ho_Rectangle3.Dispose();
                ho_Rectangle31.Dispose();
                ho_RegionDifference1.Dispose();
                ho_Boxs.Dispose();
                ho_BoxImage.Dispose();
                ho_BoxImagedMedian.Dispose();
                ho_Region1.Dispose();
                ho_BoxImagedMedianValid.Dispose();
                ho_BoxImageR0.Dispose();
                ho_BoxImageG0.Dispose();
                ho_BoxImageB0.Dispose();
                ho_BoxImageL.Dispose();
                ho_BoxImageA.Dispose();
                ho_BoxImageB.Dispose();
                ho_Contours.Dispose();
                ho_ContoursSplit.Dispose();
                ho_UnionContours.Dispose();
                ho_SelectedContours1.Dispose();
                ho_SelectedContours2.Dispose();
                ho_ObjectsConcat.Dispose();
                ho_SelectedContours.Dispose();
                ho_RegionIntersection1.Dispose();
                ho_RegionTrans.Dispose();
                ho_RegionDifference.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions2.Dispose();
                ho_ValidClothRegionGrayImage.Dispose();
                ho_ImageMean1.Dispose();
                ho_ImageMean2.Dispose();
                ho_RegionDynThresh.Dispose();
                ho_ImageMean.Dispose();
                ho_ImageSub.Dispose();
                ho_LightRegion.Dispose();
                ho_LowGrayRegion.Dispose();
                ho_RegionUnion4.Dispose();
                ho_RegionErosion.Dispose();
                ho_RegionIntersection.Dispose();
                ho_ConnectedRegions3.Dispose();
                ho_SelectedRegions3.Dispose();
                ho_SelectedRegions4.Dispose();
                ho_SelectedRegions5.Dispose();

                return;
            }
            else
            {
                if ((int)(new HTuple(hv_Mean.TupleLess(20))) != 0)
                {
                    hv_Result = 11;
                    hv_message = "标准色差获取失败，图片过暗";
                    disp_message(hv_ExpDefaultWinHandle, hv_message, "window", hv_messageShowRow * 30,
                        30, "green", "true");
                    hv_messageShowRow = hv_messageShowRow + 1;
                    ho_Image_COPY_INP_TMP.Dispose();
                    ho_DefectRegion.Dispose();
                    ho_GrayImage.Dispose();
                    ho_Rectangle.Dispose();
                    ho_ImageR0.Dispose();
                    ho_ImageG0.Dispose();
                    ho_ImageB0.Dispose();
                    ho_ImageL.Dispose();
                    ho_ImageA.Dispose();
                    ho_ImageB.Dispose();
                    ho_MidRectangle.Dispose();
                    ho_LeftRectangle.Dispose();
                    ho_RightRectangle.Dispose();
                    ho_Regions1.Dispose();
                    ho_ConnectedRegions4.Dispose();
                    ho_Rectangle1.Dispose();
                    ho_Rectangle2.Dispose();
                    ho_RegionUnion1.Dispose();
                    ho_RegionUnion2.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_ClothRegion.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_ObjectSelected1.Dispose();
                    ho_ObjectSelected2.Dispose();
                    ho_ConnectedRegions2.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_Rectangle3.Dispose();
                    ho_Rectangle31.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_Boxs.Dispose();
                    ho_BoxImage.Dispose();
                    ho_BoxImagedMedian.Dispose();
                    ho_Region1.Dispose();
                    ho_BoxImagedMedianValid.Dispose();
                    ho_BoxImageR0.Dispose();
                    ho_BoxImageG0.Dispose();
                    ho_BoxImageB0.Dispose();
                    ho_BoxImageL.Dispose();
                    ho_BoxImageA.Dispose();
                    ho_BoxImageB.Dispose();
                    ho_Contours.Dispose();
                    ho_ContoursSplit.Dispose();
                    ho_UnionContours.Dispose();
                    ho_SelectedContours1.Dispose();
                    ho_SelectedContours2.Dispose();
                    ho_ObjectsConcat.Dispose();
                    ho_SelectedContours.Dispose();
                    ho_RegionIntersection1.Dispose();
                    ho_RegionTrans.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions2.Dispose();
                    ho_ValidClothRegionGrayImage.Dispose();
                    ho_ImageMean1.Dispose();
                    ho_ImageMean2.Dispose();
                    ho_RegionDynThresh.Dispose();
                    ho_ImageMean.Dispose();
                    ho_ImageSub.Dispose();
                    ho_LightRegion.Dispose();
                    ho_LowGrayRegion.Dispose();
                    ho_RegionUnion4.Dispose();
                    ho_RegionErosion.Dispose();
                    ho_RegionIntersection.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegions3.Dispose();
                    ho_SelectedRegions4.Dispose();
                    ho_SelectedRegions5.Dispose();

                    return;
                }
            }
            //***********************************************************************************

            //***********************************查找显卡，将显卡句柄设为DeviceHandle，用于显卡加速
            HOperatorSet.QueryAvailableComputeDevices(out hv_DeviceIdentifier);
            hv_hasTransFormRGB = 0;
            if ((int)(new HTuple((new HTuple(hv_DeviceIdentifier.TupleLength())).TupleGreater(
                0))) != 0)
            {
                //打开第一个显卡？是否第一个显卡都为独显
                HOperatorSet.OpenComputeDevice(hv_DeviceIdentifier.TupleSelect(0), out hv_DeviceHandle);
                //Deactivate asynchronous execution to obtain reliable benchmarks.
                HOperatorSet.SetComputeDeviceParam(hv_DeviceHandle, "asynchronous_execution",
                    "false");
            }
            //***********************************************************************************

            if ((int)(new HTuple(hv_Result.TupleEqual(0))) != 0)
            {
                //图像分割是成RGB图
                ho_ImageR0.Dispose(); ho_ImageG0.Dispose(); ho_ImageB0.Dispose();
                HOperatorSet.Decompose3(ho_Image_COPY_INP_TMP, out ho_ImageR0, out ho_ImageG0,
                    out ho_ImageB0);

                //***************************************设置显卡加速算子trans_from_rgb，完成后关闭显卡加速
                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                    0))) != 0)
                {
                    //初始化显卡加速算子
                    HOperatorSet.InitComputeDevice(hv_DeviceHandle, " trans_from_rgb ");
                    //激活显卡加速
                    HOperatorSet.ActivateComputeDevice(hv_DeviceHandle);
                }
                //将图像转换为LAB图像
                ho_ImageL.Dispose(); ho_ImageA.Dispose(); ho_ImageB.Dispose();
                HOperatorSet.TransFromRgb(ho_ImageR0, ho_ImageG0, ho_ImageB0, out ho_ImageL,
                    out ho_ImageA, out ho_ImageB, "cielab");
                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                    0))) != 0)
                {
                    //关闭显卡加速
                    HOperatorSet.DeactivateComputeDevice(hv_DeviceHandle);
                }
                //***********************************************************************************

                //***********************************************************************************
                //分别计算LAB图像布匹中间与两边的灰度差，将灰度差较大的作为布匹区域分割对象
                //***********************************************************************************
                ho_MidRectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_MidRectangle, (hv_Height / 2) - 300, (hv_Width / 2) - 300,
                    (hv_Height / 2) + 300, (hv_Width / 2) + 300);
                ho_LeftRectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_LeftRectangle, (hv_Height / 2) - 300, 20, (hv_Height / 2) + 300,
                    150);
                ho_RightRectangle.Dispose();
                HOperatorSet.GenRectangle1(out ho_RightRectangle, (hv_Height / 2) - 300, hv_Width - 150,
                    (hv_Height / 2) + 300, hv_Width - 20);
                HOperatorSet.Intensity(ho_MidRectangle, ho_ImageL, out hv_Mean11, out hv_Deviation11);
                HOperatorSet.Intensity(ho_LeftRectangle, ho_ImageL, out hv_Mean12, out hv_Deviation12);
                HOperatorSet.Intensity(ho_RightRectangle, ho_ImageL, out hv_Mean13, out hv_Deviation13);
                HOperatorSet.TupleMax2(hv_Mean11 - hv_Mean12, hv_Mean11 - hv_Mean13, out hv_Max1);
                HOperatorSet.TupleAbs(hv_Max1, out hv_Max1);

                HOperatorSet.Intensity(ho_MidRectangle, ho_ImageA, out hv_Mean21, out hv_Deviation11);
                HOperatorSet.Intensity(ho_LeftRectangle, ho_ImageA, out hv_Mean22, out hv_Deviation12);
                HOperatorSet.Intensity(ho_RightRectangle, ho_ImageA, out hv_Mean23, out hv_Deviation13);
                HOperatorSet.TupleMax2(hv_Mean21 - hv_Mean22, hv_Mean21 - hv_Mean23, out hv_Max2);
                HOperatorSet.TupleAbs(hv_Max2, out hv_Max2);

                HOperatorSet.Intensity(ho_MidRectangle, ho_ImageB, out hv_Mean31, out hv_Deviation11);
                HOperatorSet.Intensity(ho_LeftRectangle, ho_ImageB, out hv_Mean32, out hv_Deviation12);
                HOperatorSet.Intensity(ho_RightRectangle, ho_ImageB, out hv_Mean33, out hv_Deviation13);
                HOperatorSet.TupleMax2(hv_Mean31 - hv_Mean32, hv_Mean31 - hv_Mean33, out hv_Max3);
                HOperatorSet.TupleAbs(hv_Max3, out hv_Max3);
                //***********************************************************************************

                //***********************************************************************************
                //如AB图像的灰度差<5,且L图像灰度差小于10，则未找到布匹，否则分割布匹区域，SelectedRegions1
                //***********************************************************************************
                hv_Number = 0;
                if ((int)((new HTuple((new HTuple(hv_Max2.TupleLess(5))).TupleAnd(new HTuple(hv_Max3.TupleLess(
                    5))))).TupleAnd(new HTuple(hv_Max1.TupleLess(10)))) != 0)
                {
                    //未找到布匹
                    hv_Result = 1;
                    disp_message(hv_ExpDefaultWinHandle, "未找到布匹", "window", 30, 30,
                        "red", "true");
                    hv_messageShowRow = hv_messageShowRow + 1;
                    ho_Image_COPY_INP_TMP.Dispose();
                    ho_DefectRegion.Dispose();
                    ho_GrayImage.Dispose();
                    ho_Rectangle.Dispose();
                    ho_ImageR0.Dispose();
                    ho_ImageG0.Dispose();
                    ho_ImageB0.Dispose();
                    ho_ImageL.Dispose();
                    ho_ImageA.Dispose();
                    ho_ImageB.Dispose();
                    ho_MidRectangle.Dispose();
                    ho_LeftRectangle.Dispose();
                    ho_RightRectangle.Dispose();
                    ho_Regions1.Dispose();
                    ho_ConnectedRegions4.Dispose();
                    ho_Rectangle1.Dispose();
                    ho_Rectangle2.Dispose();
                    ho_RegionUnion1.Dispose();
                    ho_RegionUnion2.Dispose();
                    ho_RegionOpening1.Dispose();
                    ho_ConnectedRegions1.Dispose();
                    ho_SelectedRegions1.Dispose();
                    ho_ClothRegion.Dispose();
                    ho_SortedRegions.Dispose();
                    ho_ObjectSelected1.Dispose();
                    ho_ObjectSelected2.Dispose();
                    ho_ConnectedRegions2.Dispose();
                    ho_ObjectSelected.Dispose();
                    ho_Rectangle3.Dispose();
                    ho_Rectangle31.Dispose();
                    ho_RegionDifference1.Dispose();
                    ho_Boxs.Dispose();
                    ho_BoxImage.Dispose();
                    ho_BoxImagedMedian.Dispose();
                    ho_Region1.Dispose();
                    ho_BoxImagedMedianValid.Dispose();
                    ho_BoxImageR0.Dispose();
                    ho_BoxImageG0.Dispose();
                    ho_BoxImageB0.Dispose();
                    ho_BoxImageL.Dispose();
                    ho_BoxImageA.Dispose();
                    ho_BoxImageB.Dispose();
                    ho_Contours.Dispose();
                    ho_ContoursSplit.Dispose();
                    ho_UnionContours.Dispose();
                    ho_SelectedContours1.Dispose();
                    ho_SelectedContours2.Dispose();
                    ho_ObjectsConcat.Dispose();
                    ho_SelectedContours.Dispose();
                    ho_RegionIntersection1.Dispose();
                    ho_RegionTrans.Dispose();
                    ho_RegionDifference.Dispose();
                    ho_RegionOpening.Dispose();
                    ho_ConnectedRegions.Dispose();
                    ho_SelectedRegions2.Dispose();
                    ho_ValidClothRegionGrayImage.Dispose();
                    ho_ImageMean1.Dispose();
                    ho_ImageMean2.Dispose();
                    ho_RegionDynThresh.Dispose();
                    ho_ImageMean.Dispose();
                    ho_ImageSub.Dispose();
                    ho_LightRegion.Dispose();
                    ho_LowGrayRegion.Dispose();
                    ho_RegionUnion4.Dispose();
                    ho_RegionErosion.Dispose();
                    ho_RegionIntersection.Dispose();
                    ho_ConnectedRegions3.Dispose();
                    ho_SelectedRegions3.Dispose();
                    ho_SelectedRegions4.Dispose();
                    ho_SelectedRegions5.Dispose();

                    return;
                }
                else
                {
                    if ((int)((new HTuple(hv_Max2.TupleGreater(5))).TupleOr(new HTuple(hv_Max3.TupleGreater(
                        5)))) != 0)
                    {
                        if ((int)(new HTuple(hv_Max2.TupleGreater(hv_Max3))) != 0)
                        {
                            HOperatorSet.GrayHisto(ho_ImageA, ho_ImageA, out hv_AbsoluteHisto,
                                out hv_RelativeHisto);
                            HOperatorSet.HistoToThresh(hv_AbsoluteHisto, 4, out hv_MinThresh, out hv_MaxThresh);
                            ho_Regions1.Dispose();
                            HOperatorSet.Threshold(ho_ImageA, out ho_Regions1, hv_MinThresh, hv_MaxThresh);
                        }
                        else
                        {
                            HOperatorSet.GrayHisto(ho_ImageB, ho_ImageB, out hv_AbsoluteHisto,
                                out hv_RelativeHisto);
                            HOperatorSet.HistoToThresh(hv_AbsoluteHisto, 4, out hv_MinThresh, out hv_MaxThresh);
                            ho_Regions1.Dispose();
                            HOperatorSet.Threshold(ho_ImageB, out ho_Regions1, hv_MinThresh, hv_MaxThresh);
                            //auto_threshold (ImageB, Regions1, 1)
                        }

                    }
                    else
                    {
                        HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
                        HOperatorSet.GrayHisto(ho_ImageL, ho_ImageL, out hv_AbsoluteHisto, out hv_RelativeHisto);
                        HOperatorSet.HistoToThresh(hv_AbsoluteHisto, 4, out hv_MinThresh, out hv_MaxThresh);
                        ho_Regions1.Dispose();
                        HOperatorSet.Threshold(ho_ImageL, out ho_Regions1, hv_MinThresh, hv_MaxThresh);
                    }
                    ho_ConnectedRegions4.Dispose();
                    HOperatorSet.Connection(ho_Regions1, out ho_ConnectedRegions4);
                    ho_Regions1.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions4, out ho_Regions1, (new HTuple("height")).TupleConcat(
                        "column"), "and", ((hv_Height - 100)).TupleConcat(200), ((hv_Height + 100)).TupleConcat(
                        hv_Width - 200));

                    //***********************************************************************************
                    //防止周期性缺陷
                    //***********************************************************************************
                    ho_Rectangle1.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle1, 1, 50, 3, hv_Width - 50);
                    ho_Rectangle2.Dispose();
                    HOperatorSet.GenRectangle1(out ho_Rectangle2, hv_Height - 3, 50, hv_Height,
                        hv_Width - 50);
                    ho_RegionUnion1.Dispose();
                    HOperatorSet.Union2(ho_Rectangle1, ho_Rectangle2, out ho_RegionUnion1);
                    ho_RegionUnion2.Dispose();
                    HOperatorSet.Union2(ho_RegionUnion1, ho_Regions1, out ho_RegionUnion2);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.FillUp(ho_RegionUnion2, out ExpTmpOutVar_0);
                        ho_RegionUnion2.Dispose();
                        ho_RegionUnion2 = ExpTmpOutVar_0;
                    }
                    ho_RegionOpening1.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionUnion2, out ho_RegionOpening1,
                        1, 7);
                    //***********************************************************************************
                    ho_ConnectedRegions1.Dispose();
                    HOperatorSet.Connection(ho_RegionOpening1, out ho_ConnectedRegions1);
                    ho_SelectedRegions1.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1,
                        (new HTuple("width")).TupleConcat("height"), "and", ((hv_Width / 20)).TupleConcat(
                        hv_Height - 100), ((hv_Width - 100)).TupleConcat(hv_Height + 100));
                    HOperatorSet.CountObj(ho_SelectedRegions1, out hv_Number);
                }
                //***********************************************************************************

                if ((int)(new HTuple(hv_Result.TupleEqual(0))) != 0)
                {
                    ho_ClothRegion.Dispose();
                    HOperatorSet.FillUp(ho_SelectedRegions1, out ho_ClothRegion);
                    if ((int)(new HTuple(hv_Number.TupleEqual(0))) != 0)
                    {
                        //未找到布匹
                        hv_Result = 1;
                        disp_message(hv_ExpDefaultWinHandle, "未找到布匹", "window", 30,
                            30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                        ho_Image_COPY_INP_TMP.Dispose();
                        ho_DefectRegion.Dispose();
                        ho_GrayImage.Dispose();
                        ho_Rectangle.Dispose();
                        ho_ImageR0.Dispose();
                        ho_ImageG0.Dispose();
                        ho_ImageB0.Dispose();
                        ho_ImageL.Dispose();
                        ho_ImageA.Dispose();
                        ho_ImageB.Dispose();
                        ho_MidRectangle.Dispose();
                        ho_LeftRectangle.Dispose();
                        ho_RightRectangle.Dispose();
                        ho_Regions1.Dispose();
                        ho_ConnectedRegions4.Dispose();
                        ho_Rectangle1.Dispose();
                        ho_Rectangle2.Dispose();
                        ho_RegionUnion1.Dispose();
                        ho_RegionUnion2.Dispose();
                        ho_RegionOpening1.Dispose();
                        ho_ConnectedRegions1.Dispose();
                        ho_SelectedRegions1.Dispose();
                        ho_ClothRegion.Dispose();
                        ho_SortedRegions.Dispose();
                        ho_ObjectSelected1.Dispose();
                        ho_ObjectSelected2.Dispose();
                        ho_ConnectedRegions2.Dispose();
                        ho_ObjectSelected.Dispose();
                        ho_Rectangle3.Dispose();
                        ho_Rectangle31.Dispose();
                        ho_RegionDifference1.Dispose();
                        ho_Boxs.Dispose();
                        ho_BoxImage.Dispose();
                        ho_BoxImagedMedian.Dispose();
                        ho_Region1.Dispose();
                        ho_BoxImagedMedianValid.Dispose();
                        ho_BoxImageR0.Dispose();
                        ho_BoxImageG0.Dispose();
                        ho_BoxImageB0.Dispose();
                        ho_BoxImageL.Dispose();
                        ho_BoxImageA.Dispose();
                        ho_BoxImageB.Dispose();
                        ho_Contours.Dispose();
                        ho_ContoursSplit.Dispose();
                        ho_UnionContours.Dispose();
                        ho_SelectedContours1.Dispose();
                        ho_SelectedContours2.Dispose();
                        ho_ObjectsConcat.Dispose();
                        ho_SelectedContours.Dispose();
                        ho_RegionIntersection1.Dispose();
                        ho_RegionTrans.Dispose();
                        ho_RegionDifference.Dispose();
                        ho_RegionOpening.Dispose();
                        ho_ConnectedRegions.Dispose();
                        ho_SelectedRegions2.Dispose();
                        ho_ValidClothRegionGrayImage.Dispose();
                        ho_ImageMean1.Dispose();
                        ho_ImageMean2.Dispose();
                        ho_RegionDynThresh.Dispose();
                        ho_ImageMean.Dispose();
                        ho_ImageSub.Dispose();
                        ho_LightRegion.Dispose();
                        ho_LowGrayRegion.Dispose();
                        ho_RegionUnion4.Dispose();
                        ho_RegionErosion.Dispose();
                        ho_RegionIntersection.Dispose();
                        ho_ConnectedRegions3.Dispose();
                        ho_SelectedRegions3.Dispose();
                        ho_SelectedRegions4.Dispose();
                        ho_SelectedRegions5.Dispose();

                        return;
                    }
                    else if ((int)(new HTuple(hv_Number.TupleGreater(1))) != 0)
                    {
                        ho_SortedRegions.Dispose();
                        HOperatorSet.SortRegion(ho_ClothRegion, out ho_SortedRegions, "first_point",
                            "true", "row");
                        ho_ObjectSelected1.Dispose();
                        HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected1, 1);
                        ho_ObjectSelected2.Dispose();
                        HOperatorSet.SelectObj(ho_SortedRegions, out ho_ObjectSelected2, 2);
                        HOperatorSet.SmallestRectangle1(ho_ObjectSelected1, out hv_Row11, out hv_Column11,
                            out hv_Row21, out hv_Column21);
                        HOperatorSet.SmallestRectangle1(ho_ObjectSelected2, out hv_Row12, out hv_Column12,
                            out hv_Row22, out hv_Column22);
                        HOperatorSet.Convexity(ho_ObjectSelected1, out hv_Convexity1);
                        HOperatorSet.Convexity(ho_ObjectSelected2, out hv_Convexity2);
                        if ((int)((new HTuple((new HTuple(hv_Column11.TupleLess(2))).TupleAnd(
                            new HTuple(hv_Column22.TupleGreater(hv_Height - 2))))).TupleAnd((new HTuple(hv_Convexity1.TupleLess(
                            0.97))).TupleOr(new HTuple(hv_Convexity2.TupleLess(0.97))))) != 0)
                        {
                            //接缝布匹
                            hv_Result = 2;
                            disp_message(hv_ExpDefaultWinHandle, "布匹有接缝或者横向长缺陷",
                                "window", hv_messageShowRow * 30, 30, "red", "true");
                            hv_messageShowRow = hv_messageShowRow + 1;
                            ho_Image_COPY_INP_TMP.Dispose();
                            ho_DefectRegion.Dispose();
                            ho_GrayImage.Dispose();
                            ho_Rectangle.Dispose();
                            ho_ImageR0.Dispose();
                            ho_ImageG0.Dispose();
                            ho_ImageB0.Dispose();
                            ho_ImageL.Dispose();
                            ho_ImageA.Dispose();
                            ho_ImageB.Dispose();
                            ho_MidRectangle.Dispose();
                            ho_LeftRectangle.Dispose();
                            ho_RightRectangle.Dispose();
                            ho_Regions1.Dispose();
                            ho_ConnectedRegions4.Dispose();
                            ho_Rectangle1.Dispose();
                            ho_Rectangle2.Dispose();
                            ho_RegionUnion1.Dispose();
                            ho_RegionUnion2.Dispose();
                            ho_RegionOpening1.Dispose();
                            ho_ConnectedRegions1.Dispose();
                            ho_SelectedRegions1.Dispose();
                            ho_ClothRegion.Dispose();
                            ho_SortedRegions.Dispose();
                            ho_ObjectSelected1.Dispose();
                            ho_ObjectSelected2.Dispose();
                            ho_ConnectedRegions2.Dispose();
                            ho_ObjectSelected.Dispose();
                            ho_Rectangle3.Dispose();
                            ho_Rectangle31.Dispose();
                            ho_RegionDifference1.Dispose();
                            ho_Boxs.Dispose();
                            ho_BoxImage.Dispose();
                            ho_BoxImagedMedian.Dispose();
                            ho_Region1.Dispose();
                            ho_BoxImagedMedianValid.Dispose();
                            ho_BoxImageR0.Dispose();
                            ho_BoxImageG0.Dispose();
                            ho_BoxImageB0.Dispose();
                            ho_BoxImageL.Dispose();
                            ho_BoxImageA.Dispose();
                            ho_BoxImageB.Dispose();
                            ho_Contours.Dispose();
                            ho_ContoursSplit.Dispose();
                            ho_UnionContours.Dispose();
                            ho_SelectedContours1.Dispose();
                            ho_SelectedContours2.Dispose();
                            ho_ObjectsConcat.Dispose();
                            ho_SelectedContours.Dispose();
                            ho_RegionIntersection1.Dispose();
                            ho_RegionTrans.Dispose();
                            ho_RegionDifference.Dispose();
                            ho_RegionOpening.Dispose();
                            ho_ConnectedRegions.Dispose();
                            ho_SelectedRegions2.Dispose();
                            ho_ValidClothRegionGrayImage.Dispose();
                            ho_ImageMean1.Dispose();
                            ho_ImageMean2.Dispose();
                            ho_RegionDynThresh.Dispose();
                            ho_ImageMean.Dispose();
                            ho_ImageSub.Dispose();
                            ho_LightRegion.Dispose();
                            ho_LowGrayRegion.Dispose();
                            ho_RegionUnion4.Dispose();
                            ho_RegionErosion.Dispose();
                            ho_RegionIntersection.Dispose();
                            ho_ConnectedRegions3.Dispose();
                            ho_SelectedRegions3.Dispose();
                            ho_SelectedRegions4.Dispose();
                            ho_SelectedRegions5.Dispose();

                            return;
                        }
                        else
                        {
                            //布匹有周期性缺陷
                            hv_Result = 3;
                            ho_DefectRegion.Dispose();
                            HOperatorSet.SelectShape(ho_ClothRegion, out ho_DefectRegion, "height",
                                "and", hv_Height - 100, hv_Height);
                            ho_ConnectedRegions2.Dispose();
                            HOperatorSet.Connection(ho_DefectRegion, out ho_ConnectedRegions2);
                            HOperatorSet.CountObj(ho_ConnectedRegions2, out hv_Number2);
                            //周期性缺陷++
                            if (hv_tupleDetectResult == null)
                                hv_tupleDetectResult = new HTuple();
                            hv_tupleDetectResult[0] = (hv_tupleDetectResult.TupleSelect(0)) + hv_Number2;
                            hv_tempMessage = hv_defectLoactionNumber.Clone();
                            HTuple end_val242 = hv_Number2;
                            HTuple step_val242 = 1;
                            for (hv_i = 1; hv_i.Continue(end_val242, step_val242); hv_i = hv_i.TupleAdd(step_val242))
                            {
                                if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                                {
                                    hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                                }
                                ho_ObjectSelected.Dispose();
                                HOperatorSet.SelectObj(ho_ConnectedRegions2, out ho_ObjectSelected,
                                    hv_i);
                                HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14,
                                    out hv_Column14, out hv_Row24, out hv_Column24);
                                ho_Rectangle3.Dispose();
                                HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                    hv_Row24 + 30, hv_Column24 + 30);
                                //画缺陷框
                                HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                                HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                                ho_Rectangle31.Dispose();
                                HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                                ho_RegionDifference1.Dispose();
                                HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                    );
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                        out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                        0), "fill");
                                    ho_ImageWithDefect.Dispose();
                                    ho_ImageWithDefect = ExpTmpOutVar_0;
                                }
                                //在缺陷框右边标注编号
                                HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                    hv_Column24 + 35);
                                HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                                hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                            }
                            disp_message(hv_ExpDefaultWinHandle, "周期性缺陷，编号：" + hv_tempMessage,
                                "window", hv_messageShowRow * 30, 30, "red", "true");
                            hv_messageShowRow = hv_messageShowRow + 1;
                        }
                    }

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ClosingRectangle1(ho_ClothRegion, out ExpTmpOutVar_0, 60,
                            20);
                        ho_ClothRegion.Dispose();
                        ho_ClothRegion = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.OpeningRectangle1(ho_ClothRegion, out ExpTmpOutVar_0, 1, 10);
                        ho_ClothRegion.Dispose();
                        ho_ClothRegion = ExpTmpOutVar_0;
                    }

                    if ((int)(new HTuple(hv_Result.TupleNotEqual(1))) != 0)
                    {
                        if ((int)(new HTuple(hv_boxNumber.TupleLessEqual(0))) != 0)
                        {
                            //检测框个数必须大于0
                            disp_message(hv_ExpDefaultWinHandle, "检测框个数必须大于0",
                                "window", 30, 30, "red", "true");
                            hv_messageShowRow = hv_messageShowRow + 1;
                        }
                        else
                        {
                            //标准色差检测
                            //boxDistance表示两个框间距
                            hv_boxDistance = ((hv_Width - (hv_boxNumber * hv_boxWidth)) - (hv_boxBenginX * 2)) / (hv_boxNumber - 1);
                            //，boxBenginY框起始y坐标
                            hv_boxBenginY = (hv_Height - hv_boxHeight) / 2;
                            hv_tupleDeviationL = new HTuple();
                            hv_tupleDeviationA = new HTuple();
                            hv_tupleDeviationB = new HTuple();
                            //定义检测框
                            ho_Boxs.Dispose();
                            HOperatorSet.GenEmptyObj(out ho_Boxs);
                            HTuple end_val284 = hv_boxNumber - 1;
                            HTuple step_val284 = 1;
                            for (hv_i = 0; hv_i.Continue(end_val284, step_val284); hv_i = hv_i.TupleAdd(step_val284))
                            {
                                ho_Rectangle.Dispose();
                                HOperatorSet.GenRectangle1(out ho_Rectangle, hv_boxBenginY, hv_boxBenginX + (hv_i * (hv_boxWidth + hv_boxDistance)),
                                    hv_boxBenginY + hv_boxHeight, (hv_boxBenginX + (hv_i * (hv_boxWidth + hv_boxDistance))) + hv_boxWidth);
                                {
                                    HObject ExpTmpOutVar_0;
                                    HOperatorSet.Union2(ho_Boxs, ho_Rectangle, out ExpTmpOutVar_0);
                                    ho_Boxs.Dispose();
                                    ho_Boxs = ExpTmpOutVar_0;
                                }
                                ho_BoxImage.Dispose();
                                HOperatorSet.ReduceDomain(ho_Image_COPY_INP_TMP, ho_Rectangle, out ho_BoxImage
                                    );
                                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                    0))) != 0)
                                {
                                    HOperatorSet.InitComputeDevice(hv_DeviceHandle, "median_image");
                                    HOperatorSet.ActivateComputeDevice(hv_DeviceHandle);
                                }
                                //中值滤波
                                ho_BoxImagedMedian.Dispose();
                                HOperatorSet.MedianImage(ho_BoxImage, out ho_BoxImagedMedian, "circle",
                                    hv_medianKernal * 0.5, "mirrored");
                                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                    0))) != 0)
                                {
                                    HOperatorSet.DeactivateComputeDevice(hv_DeviceHandle);
                                }
                                //动态阈值，并选取区域最大
                                ho_Region1.Dispose();
                                HOperatorSet.VarThreshold(ho_BoxImagedMedian, out ho_Region1, 25,
                                    25, 0.1, 1, "equal");
                                ho_BoxImagedMedianValid.Dispose();
                                HOperatorSet.ReduceDomain(ho_BoxImagedMedian, ho_Region1, out ho_BoxImagedMedianValid
                                    );

                                ho_BoxImageR0.Dispose(); ho_BoxImageG0.Dispose(); ho_BoxImageB0.Dispose();
                                HOperatorSet.Decompose3(ho_BoxImagedMedianValid, out ho_BoxImageR0,
                                    out ho_BoxImageG0, out ho_BoxImageB0);
                                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                    0))) != 0)
                                {
                                    HOperatorSet.InitComputeDevice(hv_DeviceHandle, "trans_from_rgb");
                                    HOperatorSet.ActivateComputeDevice(hv_DeviceHandle);
                                }
                                ho_BoxImageL.Dispose(); ho_BoxImageA.Dispose(); ho_BoxImageB.Dispose();
                                HOperatorSet.TransFromRgb(ho_BoxImageR0, ho_BoxImageG0, ho_BoxImageB0,
                                    out ho_BoxImageL, out ho_BoxImageA, out ho_BoxImageB, "cielab");
                                if ((int)(new HTuple((new HTuple(hv_DeviceHandle.TupleLength())).TupleGreater(
                                    0))) != 0)
                                {
                                    HOperatorSet.DeactivateComputeDevice(hv_DeviceHandle);
                                }

                                HOperatorSet.Intensity(ho_Rectangle, ho_BoxImageL, out hv_MeanL,
                                    out hv_DeviationL);
                                HOperatorSet.Intensity(ho_Rectangle, ho_BoxImageA, out hv_MeanA,
                                    out hv_DeviationA);
                                HOperatorSet.Intensity(ho_Rectangle, ho_BoxImageB, out hv_MeanB,
                                    out hv_DeviationB);
                                if (hv_standardTupleL == null)
                                    hv_standardTupleL = new HTuple();
                                hv_standardTupleL[hv_i] = hv_MeanL;
                                if (hv_standardTupleA == null)
                                    hv_standardTupleA = new HTuple();
                                hv_standardTupleA[hv_i] = hv_MeanA;
                                if (hv_standardTupleB == null)
                                    hv_standardTupleB = new HTuple();
                                hv_standardTupleB[hv_i] = hv_MeanB;
                                if (hv_tupleDeviationL == null)
                                    hv_tupleDeviationL = new HTuple();
                                hv_tupleDeviationL[hv_i] = hv_DeviationL;
                                if (hv_tupleDeviationA == null)
                                    hv_tupleDeviationA = new HTuple();
                                hv_tupleDeviationA[hv_i] = hv_DeviationA;
                                if (hv_tupleDeviationB == null)
                                    hv_tupleDeviationB = new HTuple();
                                hv_tupleDeviationB[hv_i] = hv_DeviationB;
                            }

                            //***********************************************************************************
                            //去掉最大、最小的，求取标准色差
                            //***********************************************************************************
                            HOperatorSet.TupleSort(hv_standardTupleL, out hv_standardTupleL1);
                            HOperatorSet.TupleSort(hv_standardTupleA, out hv_standardTupleA1);
                            HOperatorSet.TupleSort(hv_standardTupleB, out hv_standardTupleB1);
                            if ((int)(new HTuple(hv_boxNumber.TupleGreater(2))) != 0)
                            {
                                hv_totalL = 0;
                                hv_totalA = 0;
                                hv_totalB = 0;
                                HTuple end_val332 = hv_boxNumber - 2;
                                HTuple step_val332 = 1;
                                for (hv_k = 1; hv_k.Continue(end_val332, step_val332); hv_k = hv_k.TupleAdd(step_val332))
                                {
                                    hv_totalL = hv_totalL + (hv_standardTupleL1.TupleSelect(hv_k));
                                    hv_totalA = hv_totalA + (hv_standardTupleA1.TupleSelect(hv_k));
                                    hv_totalB = hv_totalB + (hv_standardTupleB1.TupleSelect(hv_k));
                                }
                                hv_standardL = hv_totalL / (hv_boxNumber - 2);
                                hv_standardA = hv_totalA / (hv_boxNumber - 2);
                                hv_standardB = hv_totalB / (hv_boxNumber - 2);
                            }
                            else
                            {
                                hv_standardL = hv_standardTupleL1.TupleSelect(0);
                                hv_standardA = hv_standardTupleA1.TupleSelect(0);
                                hv_standardB = hv_standardTupleB1.TupleSelect(0);
                            }

                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
                            HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                            HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);
                            HOperatorSet.DispObj(ho_Boxs, hv_ExpDefaultWinHandle);
                            disp_message(hv_ExpDefaultWinHandle, "标准色差获取成功", "window",
                                30, 30, "green", "true");

                        }
                    }


                    //***********************************************************************************
                    //检测布匹两边的斜率，判断其是否卷边，如卷边，则不铺宽度不求取
                    //***********************************************************************************
                    HOperatorSet.SmallestRectangle1(ho_ClothRegion, out hv_Row1, out hv_Column1,
                        out hv_Row2, out hv_Column2);
                    ho_Contours.Dispose();
                    HOperatorSet.GenContourRegionXld(ho_ClothRegion, out ho_Contours, "border");
                    ho_ContoursSplit.Dispose();
                    HOperatorSet.SegmentContoursXld(ho_Contours, out ho_ContoursSplit, "lines_circles",
                        40, 20, 1);
                    ho_UnionContours.Dispose();
                    HOperatorSet.UnionCollinearContoursXld(ho_ContoursSplit, out ho_UnionContours,
                        20, 10, 10, 0.2, "attr_keep");
                    ho_SelectedContours1.Dispose();
                    HOperatorSet.SelectContoursXld(ho_UnionContours, out ho_SelectedContours1,
                        "direction", 1.17, 1.57 - hv_edgeRollSlope, -0.5, 0.5);
                    ho_SelectedContours2.Dispose();
                    HOperatorSet.SelectContoursXld(ho_UnionContours, out ho_SelectedContours2,
                        "direction", 1.57 + hv_edgeRollSlope, 1.97, -0.5, 0.5);
                    ho_ObjectsConcat.Dispose();
                    HOperatorSet.ConcatObj(ho_SelectedContours1, ho_SelectedContours2, out ho_ObjectsConcat
                        );
                    ho_SelectedContours.Dispose();
                    HOperatorSet.SelectContoursXld(ho_ObjectsConcat, out ho_SelectedContours,
                        "contour_length", 100, 20000, -0.5, 0.5);
                    HOperatorSet.CountObj(ho_SelectedContours, out hv_Number1);
                    //**********************************************************************************
                    if ((int)(new HTuple(hv_Number1.TupleGreater(0))) != 0)
                    {
                        //卷边或者布匹偏移
                        //卷边或者布匹偏移++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[1] = 1;
                        hv_Result = 4;
                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        HTuple end_val375 = hv_Number2;
                        HTuple step_val375 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val375, step_val375); hv_i = hv_i.TupleAdd(step_val375))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected1.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedContours, out ho_ObjectSelected1,
                                hv_i);
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.GenRegionContourXld(ho_ObjectSelected1, out ho_ObjectSelected,
                                "filled");
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            disp_message(hv_ExpDefaultWinHandle, hv_defectLoactionNumber, "window",
                                (hv_Row14 + hv_Row24) / 2, hv_Column24 + 35, "magenta", "false");
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                        }
                        disp_message(hv_ExpDefaultWinHandle, "卷边缺陷，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                    }
                    else
                    {
                        //通过布匹区域的面积以及高度，算出平均宽度
                        HOperatorSet.AreaCenter(ho_ClothRegion, out hv_Area3, out hv_Row3, out hv_Column3);
                        hv_meanWidth = hv_Area3 / (hv_Row2 - hv_Row1);
                        hv_minWidth = 0;
                        hv_maxWidth = 0;
                        //***********************************************************************************
                        //将布匹分成10份，并求取最小宽度，最大宽度，平均宽度
                        //***********************************************************************************
                        for (hv_in = 0; (int)hv_in <= 19; hv_in = (int)hv_in + 4)
                        {
                            ho_Rectangle1.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle1, (hv_in * (hv_Row2 - hv_Row1)) / 20,
                                1, ((hv_in + 1) * (hv_Row2 - hv_Row1)) / 20, hv_Width);
                            ho_RegionIntersection1.Dispose();
                            HOperatorSet.Intersection(ho_Rectangle1, ho_ClothRegion, out ho_RegionIntersection1
                                );
                            HOperatorSet.SmallestRectangle1(ho_RegionIntersection1, out hv_Row13,
                                out hv_Column13, out hv_Row23, out hv_Column23);
                            if ((int)(new HTuple(hv_minWidth.TupleEqual(0))) != 0)
                            {
                                hv_minWidth = hv_Column23 - hv_Column13;
                                hv_maxWidth = hv_Column23 - hv_Column13;
                            }
                            else
                            {
                                if ((int)(new HTuple(((hv_Column23 - hv_Column13)).TupleGreater(hv_maxWidth))) != 0)
                                {
                                    hv_maxWidth = hv_Column23 - hv_Column13;
                                }
                                if ((int)(new HTuple(((hv_Column23 - hv_Column13)).TupleLess(hv_minWidth))) != 0)
                                {
                                    hv_minWidth = hv_Column23 - hv_Column13;
                                }
                            }

                        }
                        //***********************************************************************************
                        //如果平均宽度不在最小宽度与最大宽度之间，则将平均宽度置为0.5*(minWidth+maxWidth)
                        if ((int)((new HTuple(hv_meanWidth.TupleLess(hv_minWidth))).TupleOr(new HTuple(hv_meanWidth.TupleGreater(
                            hv_maxWidth)))) != 0)
                        {
                            hv_meanWidth = 0.5 * (hv_minWidth + hv_maxWidth);
                        }
                    }
                    HOperatorSet.TupleFloor(hv_minWidth / hv_magnification, out hv_minWidth);
                    disp_message(hv_ExpDefaultWinHandle, ("布匹最小宽度：" + hv_minWidth) + "mm",
                        "window", 60, 30, "green", "true");
                    HOperatorSet.TupleFloor(hv_maxWidth / hv_magnification, out hv_maxWidth);
                    disp_message(hv_ExpDefaultWinHandle, ("布匹最大宽度：" + hv_maxWidth) + "mm",
                        "window", 90, 30, "green", "true");
                    HOperatorSet.TupleFloor(hv_meanWidth / hv_magnification, out hv_meanWidth);
                    disp_message(hv_ExpDefaultWinHandle, ("布匹平均宽度：" + hv_meanWidth) + "mm",
                        "window", 120, 30, "green", "true");

                    //***********************************************************************************
                    //计算是否缺边
                    //***********************************************************************************
                    ho_RegionTrans.Dispose();
                    HOperatorSet.ShapeTrans(ho_ClothRegion, out ho_RegionTrans, "rectangle1");
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_RegionTrans, ho_ClothRegion, out ho_RegionDifference
                        );
                    ho_RegionOpening.Dispose();
                    HOperatorSet.OpeningRectangle1(ho_RegionDifference, out ho_RegionOpening,
                        hv_imperfectBorderWidth * 2, 2);
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions);
                    ho_SelectedRegions2.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions2,
                        (new HTuple("row")).TupleConcat("height"), "and", ((hv_Row1 + 10)).TupleConcat(
                        hv_imperfectBorderWidth), ((hv_Row2 - 10)).TupleConcat(20000));
                    HOperatorSet.CountObj(ho_SelectedRegions2, out hv_Number3);
                    if ((int)(new HTuple(hv_Number3.TupleGreater(0))) != 0)
                    {
                        //缺边缺陷
                        //缺边缺陷++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[2] = (hv_tupleDetectResult.TupleSelect(2)) + hv_Number3;
                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        hv_defectNumber = hv_defectNumber + hv_Number3;
                        HOperatorSet.SmallestCircle(ho_SelectedRegions2, out hv_Row, out hv_Column,
                            out hv_Radius);
                        HOperatorSet.TupleConcat(hv_tupleDefectRadius, hv_Radius, out hv_tupleDefectRadius);
                        HOperatorSet.TupleConcat(hv_tupleDefectX, hv_Column, out hv_tupleDefectX);
                        HOperatorSet.TupleConcat(hv_tupleDefectY, hv_Row, out hv_tupleDefectY);
                        HTuple end_val453 = hv_Number3;
                        HTuple step_val453 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val453, step_val453); hv_i = hv_i.TupleAdd(step_val453))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions2, out ho_ObjectSelected,
                                hv_i);
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                hv_Column24 + 35);
                            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                        }
                        disp_message(hv_ExpDefaultWinHandle, "缺边缺陷，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                    }
                    if ((int)(new HTuple(hv_Result.TupleEqual(0))) != 0)
                    {
                        //瑕疵检测
                        ho_ValidClothRegionGrayImage.Dispose();
                        HOperatorSet.ReduceDomain(ho_GrayImage, ho_ClothRegion, out ho_ValidClothRegionGrayImage
                            );
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.MedianImage(ho_ValidClothRegionGrayImage, out ExpTmpOutVar_0,
                                "circle", 2, "mirrored");
                            ho_ValidClothRegionGrayImage.Dispose();
                            ho_ValidClothRegionGrayImage = ExpTmpOutVar_0;
                        }
                        ho_ImageMean1.Dispose();
                        HOperatorSet.MeanImage(ho_ValidClothRegionGrayImage, out ho_ImageMean1,
                            10, 10);
                        ho_ImageMean2.Dispose();
                        HOperatorSet.MeanImage(ho_ValidClothRegionGrayImage, out ho_ImageMean2,
                            50, 50);
                        ho_RegionDynThresh.Dispose();
                        HOperatorSet.DynThreshold(ho_ImageMean1, ho_ImageMean2, out ho_RegionDynThresh,
                            hv_dynThresh, "dark");

                        ho_ImageMean.Dispose();
                        HOperatorSet.RegionToMean(ho_ClothRegion, ho_GrayImage, out ho_ImageMean
                            );
                        ho_ImageSub.Dispose();
                        HOperatorSet.SubImage(ho_ValidClothRegionGrayImage, ho_ImageMean, out ho_ImageSub,
                            1, 128);
                        ho_LightRegion.Dispose();
                        HOperatorSet.Threshold(ho_ImageSub, out ho_LightRegion, 128 + hv_thresh,
                            255);
                        ho_LowGrayRegion.Dispose();
                        HOperatorSet.Threshold(ho_ImageSub, out ho_LowGrayRegion, 0, 128 - hv_thresh);

                        //intensity (ClothRegion, GrayImage, ValidClothRegionGrayImageMean, Deviation)
                        //tuple_max2 (20, ValidClothRegionGrayImageMean-50, Max2)
                        //tuple_min2 (235, ValidClothRegionGrayImageMean+50, Min2)
                        //threshold (ValidClothRegionGrayImage, LowGrayRegion, 0, Max2)
                        //threshold (ValidClothRegionGrayImage, LightRegion, Min2, 255)
                        ho_RegionUnion4.Dispose();
                        HOperatorSet.Union2(ho_LightRegion, ho_LowGrayRegion, out ho_RegionUnion4
                            );
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_RegionDynThresh, ho_RegionUnion4, out ExpTmpOutVar_0
                                );
                            ho_RegionUnion4.Dispose();
                            ho_RegionUnion4 = ExpTmpOutVar_0;
                        }
                        ho_RegionErosion.Dispose();
                        HOperatorSet.ErosionRectangle1(ho_ClothRegion, out ho_RegionErosion,
                            hv_clothSideUnDetectWidth * 2, 1);
                        ho_RegionIntersection.Dispose();
                        HOperatorSet.Intersection(ho_RegionErosion, ho_RegionUnion4, out ho_RegionIntersection
                            );
                        ho_ConnectedRegions3.Dispose();
                        HOperatorSet.Connection(ho_RegionIntersection, out ho_ConnectedRegions3
                            );
                        ho_SelectedRegions3.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_SelectedRegions3,
                            "height", "and", hv_Height - 100, hv_Height);
                        HOperatorSet.CountObj(ho_SelectedRegions3, out hv_Number2);
                        //周期性缺陷++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[0] = (hv_tupleDetectResult.TupleSelect(0)) + hv_Number2;
                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        HTuple end_val502 = hv_Number2;
                        HTuple step_val502 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val502, step_val502); hv_i = hv_i.TupleAdd(step_val502))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions3, out ho_ObjectSelected,
                                hv_i);
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                hv_Column24 + 35);
                            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;

                        }
                        disp_message(hv_ExpDefaultWinHandle, "周期性缺陷，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                        ho_SelectedRegions4.Dispose();
                        HOperatorSet.SelectShape(ho_ConnectedRegions3, out ho_SelectedRegions4,
                            "height", "and", 10, hv_Height - 100);
                        ho_SelectedRegions5.Dispose();
                        HOperatorSet.SelectShape(ho_SelectedRegions4, out ho_SelectedRegions5,
                            ((new HTuple("area")).TupleConcat("rb")).TupleConcat("ra"), "or",
                            ((hv_defectArea.TupleConcat(hv_defectWidth / 2))).TupleConcat(hv_defectHeight / 2),
                            ((new HTuple(500000)).TupleConcat(200000)).TupleConcat(200000));
                        HOperatorSet.CountObj(ho_SelectedRegions5, out hv_Number2);
                        hv_defectNumber = hv_defectNumber + hv_Number2;
                        //将检测结果输出
                        HOperatorSet.SmallestCircle(ho_SelectedRegions5, out hv_Row, out hv_Column,
                            out hv_Radius);
                        HOperatorSet.TupleConcat(hv_tupleDefectRadius, hv_Radius, out hv_tupleDefectRadius);
                        HOperatorSet.TupleConcat(hv_tupleDefectX, hv_Column, out hv_tupleDefectX);
                        HOperatorSet.TupleConcat(hv_tupleDefectY, hv_Row, out hv_tupleDefectY);

                        hv_tempMessage = hv_defectLoactionNumber.Clone();
                        //瑕疵点缺陷++
                        if (hv_tupleDetectResult == null)
                            hv_tupleDetectResult = new HTuple();
                        hv_tupleDetectResult[3] = (hv_tupleDetectResult.TupleSelect(3)) + hv_Number2;
                        HTuple end_val536 = hv_Number2;
                        HTuple step_val536 = 1;
                        for (hv_i = 1; hv_i.Continue(end_val536, step_val536); hv_i = hv_i.TupleAdd(step_val536))
                        {
                            if ((int)(new HTuple(hv_i.TupleGreater(1))) != 0)
                            {
                                hv_tempMessage = (hv_tempMessage + new HTuple(",")) + hv_defectLoactionNumber;
                            }
                            ho_ObjectSelected.Dispose();
                            HOperatorSet.SelectObj(ho_SelectedRegions5, out ho_ObjectSelected,
                                hv_i);
                            HOperatorSet.SmallestRectangle1(ho_ObjectSelected, out hv_Row14, out hv_Column14,
                                out hv_Row24, out hv_Column24);
                            ho_Rectangle3.Dispose();
                            HOperatorSet.GenRectangle1(out ho_Rectangle3, hv_Row14 - 30, hv_Column14 - 30,
                                hv_Row24 + 30, hv_Column24 + 30);
                            //画缺陷框
                            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                            HOperatorSet.DispObj(ho_Rectangle3, hv_ExpDefaultWinHandle);
                            ho_Rectangle31.Dispose();
                            HOperatorSet.DilationCircle(ho_Rectangle3, out ho_Rectangle31, 8);
                            ho_RegionDifference1.Dispose();
                            HOperatorSet.Difference(ho_Rectangle31, ho_Rectangle3, out ho_RegionDifference1
                                );
                            {
                                HObject ExpTmpOutVar_0;
                                HOperatorSet.PaintRegion(ho_RegionDifference1, ho_ImageWithDefect,
                                    out ExpTmpOutVar_0, ((new HTuple(255)).TupleConcat(0)).TupleConcat(
                                    0), "fill");
                                ho_ImageWithDefect.Dispose();
                                ho_ImageWithDefect = ExpTmpOutVar_0;
                            }
                            //在缺陷框右边标注编号
                            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, (hv_Row14 + hv_Row24) / 2,
                                hv_Column24 + 35);
                            HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_defectLoactionNumber);
                            hv_defectLoactionNumber = hv_defectLoactionNumber + 1;
                        }
                        disp_message(hv_ExpDefaultWinHandle, "瑕疵点，编号：" + hv_tempMessage,
                            "window", hv_messageShowRow * 30, 30, "red", "true");
                        hv_messageShowRow = hv_messageShowRow + 1;
                    }

                }
            }

            ho_Image_COPY_INP_TMP.Dispose();
            ho_DefectRegion.Dispose();
            ho_GrayImage.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageR0.Dispose();
            ho_ImageG0.Dispose();
            ho_ImageB0.Dispose();
            ho_ImageL.Dispose();
            ho_ImageA.Dispose();
            ho_ImageB.Dispose();
            ho_MidRectangle.Dispose();
            ho_LeftRectangle.Dispose();
            ho_RightRectangle.Dispose();
            ho_Regions1.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_Rectangle1.Dispose();
            ho_Rectangle2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionUnion2.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_ClothRegion.Dispose();
            ho_SortedRegions.Dispose();
            ho_ObjectSelected1.Dispose();
            ho_ObjectSelected2.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Rectangle3.Dispose();
            ho_Rectangle31.Dispose();
            ho_RegionDifference1.Dispose();
            ho_Boxs.Dispose();
            ho_BoxImage.Dispose();
            ho_BoxImagedMedian.Dispose();
            ho_Region1.Dispose();
            ho_BoxImagedMedianValid.Dispose();
            ho_BoxImageR0.Dispose();
            ho_BoxImageG0.Dispose();
            ho_BoxImageB0.Dispose();
            ho_BoxImageL.Dispose();
            ho_BoxImageA.Dispose();
            ho_BoxImageB.Dispose();
            ho_Contours.Dispose();
            ho_ContoursSplit.Dispose();
            ho_UnionContours.Dispose();
            ho_SelectedContours1.Dispose();
            ho_SelectedContours2.Dispose();
            ho_ObjectsConcat.Dispose();
            ho_SelectedContours.Dispose();
            ho_RegionIntersection1.Dispose();
            ho_RegionTrans.Dispose();
            ho_RegionDifference.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_ValidClothRegionGrayImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageMean2.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ImageMean.Dispose();
            ho_ImageSub.Dispose();
            ho_LightRegion.Dispose();
            ho_LowGrayRegion.Dispose();
            ho_RegionUnion4.Dispose();
            ho_RegionErosion.Dispose();
            ho_RegionIntersection.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_SelectedRegions3.Dispose();
            ho_SelectedRegions4.Dispose();
            ho_SelectedRegions5.Dispose();

            return;



        }
        catch (HalconException HDevExpDefaultException)
        {
            ho_Image_COPY_INP_TMP.Dispose();
            ho_DefectRegion.Dispose();
            ho_GrayImage.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageR0.Dispose();
            ho_ImageG0.Dispose();
            ho_ImageB0.Dispose();
            ho_ImageL.Dispose();
            ho_ImageA.Dispose();
            ho_ImageB.Dispose();
            ho_MidRectangle.Dispose();
            ho_LeftRectangle.Dispose();
            ho_RightRectangle.Dispose();
            ho_Regions1.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_Rectangle1.Dispose();
            ho_Rectangle2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionUnion2.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_ClothRegion.Dispose();
            ho_SortedRegions.Dispose();
            ho_ObjectSelected1.Dispose();
            ho_ObjectSelected2.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Rectangle3.Dispose();
            ho_Rectangle31.Dispose();
            ho_RegionDifference1.Dispose();
            ho_Boxs.Dispose();
            ho_BoxImage.Dispose();
            ho_BoxImagedMedian.Dispose();
            ho_Region1.Dispose();
            ho_BoxImagedMedianValid.Dispose();
            ho_BoxImageR0.Dispose();
            ho_BoxImageG0.Dispose();
            ho_BoxImageB0.Dispose();
            ho_BoxImageL.Dispose();
            ho_BoxImageA.Dispose();
            ho_BoxImageB.Dispose();
            ho_Contours.Dispose();
            ho_ContoursSplit.Dispose();
            ho_UnionContours.Dispose();
            ho_SelectedContours1.Dispose();
            ho_SelectedContours2.Dispose();
            ho_ObjectsConcat.Dispose();
            ho_SelectedContours.Dispose();
            ho_RegionIntersection1.Dispose();
            ho_RegionTrans.Dispose();
            ho_RegionDifference.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_ValidClothRegionGrayImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageMean2.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ImageMean.Dispose();
            ho_ImageSub.Dispose();
            ho_LightRegion.Dispose();
            ho_LowGrayRegion.Dispose();
            ho_RegionUnion4.Dispose();
            ho_RegionErosion.Dispose();
            ho_RegionIntersection.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_SelectedRegions3.Dispose();
            ho_SelectedRegions4.Dispose();
            ho_SelectedRegions5.Dispose();

            throw HDevExpDefaultException;
        }
    }

    public void get_defect_aberration_fun(HObject ho_Image, HTuple hv_WindowHandle,
        HTuple hv_inPar, out HTuple hv_result, out HTuple hv_defectNumber, out HTuple hv_tupleDefectX,
        out HTuple hv_tupleDefectY, out HTuple hv_tupleDefectRadius, out HTuple hv_L,
        out HTuple hv_A, out HTuple hv_B)
    {




        // Local iconic variables 

        // Local control variables 

        HTuple hv_boxNumber = null, hv_boxWidth = null;
        HTuple hv_boxHeight = null, hv_boxBenginX = null, hv_medianKernal = null;
        HTuple hv_dynThresh = null, hv_defectArea = null, hv_standardTupleL = null;
        HTuple hv_standardTupleA = null, hv_standardTupleB = null;
        HTuple hv_clothAberrationGrad1 = null, hv_clothAberrationGrad2 = null;
        HTuple hv_clothAberrationGrad3 = null, hv_clothAberrationGrad4 = null;
        // Initialize local and output iconic variables 
        hv_result = new HTuple();
        hv_defectNumber = new HTuple();
        hv_tupleDefectX = new HTuple();
        hv_tupleDefectY = new HTuple();
        hv_tupleDefectRadius = new HTuple();
        hv_L = new HTuple();
        hv_A = new HTuple();
        hv_B = new HTuple();
        try
        {
            hv_boxNumber = hv_inPar.TupleSelect(0);
            hv_boxWidth = hv_inPar.TupleSelect(1);
            hv_boxHeight = hv_inPar.TupleSelect(2);
            hv_boxBenginX = hv_inPar.TupleSelect(3);
            hv_medianKernal = hv_inPar.TupleSelect(4);
            hv_dynThresh = hv_inPar.TupleSelect(5);
            hv_defectArea = hv_inPar.TupleSelect(6);
            hv_standardTupleL = hv_inPar.TupleSelect(7);
            hv_standardTupleA = hv_inPar.TupleSelect(8);
            hv_standardTupleB = hv_inPar.TupleSelect(9);
            hv_clothAberrationGrad1 = hv_inPar.TupleSelect(10);
            hv_clothAberrationGrad2 = hv_inPar.TupleSelect(11);
            hv_clothAberrationGrad3 = hv_inPar.TupleSelect(12);
            hv_clothAberrationGrad4 = hv_inPar.TupleSelect(13);
            //get_defect_aberration (Image, ImageWithDefect, standardTupleL1, standardTupleA1, standardTupleB1, defectNumber, tupleDefectX, tupleDefectY, tupleDefectRadius, clothAberration, L, A, B, minWidth, maxWidth, meanWidth)


            return;
        }
        catch (HalconException HDevExpDefaultException)
        {

            throw HDevExpDefaultException;
        }
    }

    public void estimate_background_illumination(HObject ho_Image, out HObject ho_IlluminationImage)
    {



        // Local iconic variables 

        HObject ho_ImageFFT, ho_ImageGauss, ho_ImageConvol;

        // Local control variables 

        HTuple hv_Width = null, hv_Height = null;
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_IlluminationImage);
        HOperatorSet.GenEmptyObj(out ho_ImageFFT);
        HOperatorSet.GenEmptyObj(out ho_ImageGauss);
        HOperatorSet.GenEmptyObj(out ho_ImageConvol);
        try
        {
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            ho_ImageFFT.Dispose();
            HOperatorSet.RftGeneric(ho_Image, out ho_ImageFFT, "to_freq", "none", "complex",
                hv_Width);
            ho_ImageGauss.Dispose();
            HOperatorSet.GenGaussFilter(out ho_ImageGauss, 50, 50, 0, "n", "rft", hv_Width,
                hv_Height);
            ho_ImageConvol.Dispose();
            HOperatorSet.ConvolFft(ho_ImageFFT, ho_ImageGauss, out ho_ImageConvol);
            ho_IlluminationImage.Dispose();
            HOperatorSet.RftGeneric(ho_ImageConvol, out ho_IlluminationImage, "from_freq",
                "none", "byte", hv_Width);
            ho_ImageFFT.Dispose();
            ho_ImageGauss.Dispose();
            ho_ImageConvol.Dispose();

            return;
        }
        catch (HalconException HDevExpDefaultException)
        {
            ho_ImageFFT.Dispose();
            ho_ImageGauss.Dispose();
            ho_ImageConvol.Dispose();

            throw HDevExpDefaultException;
        }
    }

    // Main procedure 
    private void action()
    {


        // Local iconic variables 

        HObject ho_DefectRegion, ho_Image1, ho_ImageWithDefect;
        HObject ho_Image2 = null, ho_ImageWithDefect1 = null;

        // Local control variables 

        HTuple hv_magnification = null, hv_leftSide = null;
        HTuple hv_rightSide = null, hv_boxNumber = null, hv_boxWidth = null;
        HTuple hv_boxHeight = null, hv_boxBenginX = null, hv_dynThresh = null;
        HTuple hv_medianKernal = null, hv_thresh = null, hv_defectArea = null;
        HTuple hv_defectWidth = null, hv_defectHeight = null, hv_edgeRollSlope = null;
        HTuple hv_imperfectBorderWidth = null, hv_clothAberrationGrad1 = null;
        HTuple hv_clothAberrationGrad2 = null, hv_clothAberrationGrad3 = null;
        HTuple hv_clothAberrationGrad4 = null, hv_result = null;
        HTuple hv_tupleL = null, hv_tupleA = null, hv_tupleB = null;
        HTuple hv_standardTupleL = null, hv_standardTupleA = null;
        HTuple hv_standardTupleB = null, hv_defectNumber = null;
        HTuple hv_tupleDefectX = null, hv_tupleDefectY = null;
        HTuple hv_tupleDefectRadius = null, hv_minWidth = null;
        HTuple hv_maxWidth = null, hv_meanWidth = null, hv_standardL = null;
        HTuple hv_standardA = null, hv_standardB = null, hv_tupleDefectRadius1 = null;
        HTuple hv_tupleDefectX1 = null, hv_tupleDefectY1 = null;
        HTuple hv_minWidth1 = null, hv_maxWidth1 = null, hv_meanWidth1 = null;
        HTuple hv_defectNumber1 = null, hv_i = null, hv_clothAberration = new HTuple();
        HTuple hv_L = new HTuple(), hv_A = new HTuple(), hv_B = new HTuple();
        HTuple hv_WindowHandle1 = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_DefectRegion);
        HOperatorSet.GenEmptyObj(out ho_Image1);
        HOperatorSet.GenEmptyObj(out ho_ImageWithDefect);
        HOperatorSet.GenEmptyObj(out ho_Image2);
        HOperatorSet.GenEmptyObj(out ho_ImageWithDefect1);
        try
        {
            //*********************输入参数
            //magnification放大率piexels/mm
            //LeftSide左边有效参数
            //RightSide右边有效参数
            //boxNumber框个数
            //boxWidth框宽度
            //boxHeight框高度
            //boxBenginX框起始X坐标
            //dynThresh缺陷阈值
            //medianKernal滤波卷积核大小
            //defectArea缺陷面积
            //edgeRollSlope判断卷边的斜率偏差
            //imperfectBorderWidth判断缺边的宽度
            //leftSide左边有效区域
            //rightSide右边有效区域
            //clothAberrationGrad1-clothAberrationGrad4色差等级分类
            //*****************************
            hv_magnification = 4.8188;
            hv_leftSide = 200;
            hv_rightSide = 200;
            hv_boxNumber = 6;
            hv_boxWidth = 400;
            hv_boxHeight = 400;
            hv_boxBenginX = 1200;
            hv_dynThresh = 15;
            hv_medianKernal = 20;
            hv_thresh = 30;
            hv_defectArea = 5;
            hv_defectWidth = 5;
            hv_defectHeight = 10;
            hv_edgeRollSlope = 0.1;
            hv_imperfectBorderWidth = 20;
            hv_clothAberrationGrad1 = 0.5;
            hv_clothAberrationGrad2 = 1.5;
            hv_clothAberrationGrad3 = 3.0;
            hv_clothAberrationGrad4 = 6.0;
            //**********************输出参数
            //result检测结果，0表示没有缺陷，1表示未找到布匹，2表示布匹接缝，3表示检测到缺陷
            //tupleL/A/B六个框的LAB值
            //standardTupleL/A/B标准LAB值
            //defectNumber检测到的缺陷个数
            //tupleDefectX缺陷中心X坐标合集
            //tupleDefectY缺陷中心Y坐标合集
            //tupleDefectRadius缺陷半径合集
            //minWidth最小宽度
            //maxWidth最大宽度
            //meanWidth平均宽度
            //*****************************
            hv_result = 0;
            hv_tupleL = new HTuple();
            hv_tupleA = new HTuple();
            hv_tupleB = new HTuple();
            hv_standardTupleL = new HTuple();
            hv_standardTupleA = new HTuple();
            hv_standardTupleB = new HTuple();
            hv_defectNumber = 0;
            hv_tupleDefectX = new HTuple();
            hv_tupleDefectY = new HTuple();
            hv_tupleDefectRadius = new HTuple();
            hv_minWidth = 0;
            hv_maxWidth = 0;
            hv_meanWidth = 0;

            ho_DefectRegion.Dispose();
            HOperatorSet.GenEmptyObj(out ho_DefectRegion);
            ho_Image1.Dispose();
            HOperatorSet.ReadImage(out ho_Image1, "G:/项目/布匹色差检测-缺陷识别/检测图片存档/2019年3月28日 星期四/1132/35.jpg");

            //dev_open_window(...);

            ho_ImageWithDefect.Dispose();
            get_standard_lab(ho_Image1, out ho_ImageWithDefect, out hv_standardTupleL,
                out hv_standardTupleA, out hv_standardTupleB, out hv_standardL, out hv_standardA,
                out hv_standardB, out hv_result, out hv_tupleDefectRadius1, out hv_tupleDefectX1,
                out hv_tupleDefectY1, out hv_minWidth1, out hv_maxWidth1, out hv_meanWidth1,
                out hv_defectNumber1);

            //boxNumber := inPar[0]
            //boxWidth := inPar[1]
            //boxHeight := inPar[2]
            //boxBenginX := inPar[3]
            //medianKernal := inPar[4]
            //dynThresh := inPar[5]
            //defectArea := inPar[6]
            //standardTupleL := inPar[7]
            //standardTupleA := inPar[8]
            //standardTupleB := inPar[9]
            //clothAberrationGrad1 := inPar[10]
            //clothAberrationGrad2 := inPar[11]
            //clothAberrationGrad3 := inPar[12]
            //clothAberrationGrad4 := inPar[13]
            for (hv_i = 1; (int)hv_i <= 30; hv_i = (int)hv_i + 1)
            {
                ho_Image2.Dispose();
                HOperatorSet.ReadImage(out ho_Image2, "G:/项目/布匹色差检测-缺陷识别/检测图片存档/2019年3月28日 星期四/1132/35.jpg");

                ho_ImageWithDefect1.Dispose();
                get_defect_aberration(ho_Image2, out ho_ImageWithDefect1, hv_standardTupleL,
                    hv_standardTupleA, hv_standardTupleB, out hv_defectNumber, out hv_tupleDefectX,
                    out hv_tupleDefectY, out hv_tupleDefectRadius, out hv_clothAberration,
                    out hv_L, out hv_A, out hv_B, out hv_minWidth, out hv_maxWidth, out hv_meanWidth);
                //dev_open_window(...);
                HOperatorSet.DispObj(ho_Image2, hv_ExpDefaultWinHandle);

                disp_message(hv_ExpDefaultWinHandle, (hv_clothAberration + "#") + hv_defectNumber,
                    "window", 12, 12, "black", "true");
                HDevelopStop();
            }


            //return ()

            //inPar := [boxNumber, boxWidth, boxHeight, boxBenginX, medianKernal, dynThresh, defectArea, standardTupleL, standardTupleA, standardTupleB, clothAberrationGrad1, clothAberrationGrad2, clothAberrationGrad3, clothAberrationGrad4]

            //get_defect_aberration_fun (Image2, WindowHandle, inPar, result1, defectNumber, tupleDefectX, tupleDefectY, tupleDefectRadius, L, A, B)






        }
        catch (HalconException HDevExpDefaultException)
        {
            ho_DefectRegion.Dispose();
            ho_Image1.Dispose();
            ho_ImageWithDefect.Dispose();
            ho_Image2.Dispose();
            ho_ImageWithDefect1.Dispose();

            throw HDevExpDefaultException;
        }
        ho_DefectRegion.Dispose();
        ho_Image1.Dispose();
        ho_ImageWithDefect.Dispose();
        ho_Image2.Dispose();
        ho_ImageWithDefect1.Dispose();

    }

    public void InitHalcon()
    {
        // Default settings used in HDevelop 
        HOperatorSet.SetSystem("width", 512);
        HOperatorSet.SetSystem("height", 512);
    }

    public void RunHalcon(HTuple Window)
    {
        hv_ExpDefaultWinHandle = Window;
        action();
    }

}

